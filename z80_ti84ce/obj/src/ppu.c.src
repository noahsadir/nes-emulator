	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_ppu_init
_ppu_init:
	call	__frameset0
	ld	hl, 39
	push	hl
	call	_gfx_SetDefaultPalette
	pop	hl
	ld	hl, (ix + 6)
	ld	(_vidRAM_Ptr), hl
	ld	hl, (ix + 9)
	ld	(_chrROM_Ptr), hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_runCycles
_ppu_runCycles:
	ld	hl, -3
	call	__frameset
	ld	iy, _ppuCycles
	ld	d, 0
	ld	bc, 0
	ld	c, (ix + 6)
	ld	hl, (_ppuCycles)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	a, d
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	ld	(_ppuCycles), bc
	ld	(_ppuCycles+3), a
	ld	hl, 340
	ld	e, d
	call	__lcmpu
	jq	nc, BB1_2
	ld	(ix - 3), iy
	call	_ppu_scanline
	ld	hl, (_ppuCycles)
	ld	iy, (ix - 3)
	ld	e, (iy)
	ld	bc, -341
	ld	a, -1
	call	__ladd
	ld	a, e
	ld	(_ppuCycles), hl
	ld	(_ppuCycles+3), a
BB1_2:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_getFrames
_ppu_getFrames:
	ld	hl, (_ppuFrames)
	ld	a, (_ppuFrames+3)
	ld	e, a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_scanline
_ppu_scanline:
	ld	iy, _scanline
	ld	de, (iy)
	ld.sis	bc, 240
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	nc, BB3_2
	push	de
	call	_ppu_drawScanline
	ld.sis	bc, 240
	ld	iy, _scanline
	pop	hl
	ld	de, (iy)
BB3_2:
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB3_4
	call	_bus_ppuReport
	ld	hl, (_ppuFrames)
	ld	iy, _ppuFrames
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iy, _scanline
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_ppuFrames), hl
	ld	(_ppuFrames+3), a
	ld	de, (iy)
BB3_4:
	ld.sis	bc, 241
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB3_5
	ld	hl, _reg_ppuStatus
	set	7, (hl)
	jq	BB3_8
BB3_5:
	ld.sis	bc, 261
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB3_8
	ld.sis	de, 0
	ld	a, (_reg_ppuStatus)
	and	a, 63
	ld	(_reg_ppuStatus), a
	jq	BB3_9
BB3_8:
	inc.sis	de
BB3_9:
	ld	(iy), e
	ld	(iy + 1), d
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_drawScanline
_ppu_drawScanline:
	ld	hl, -319
	call	__frameset
	ld	b, 3
	ld	iy, 3072
	ld	e, 1
	ld	a, (_scrollX)
	ld	d, a
	ld	a, (_scrollY)
	ld	l, a
	and	a, 7
	ld	(ix - 3), bc
	push	ix
	ld	bc, -268
	add	ix, bc
	ld	(ix), a
	pop	ix
	ld	a, d
	ld	bc, (ix - 3)
	call	__bshru
	ld	(ix - 3), de
	push	ix
	ld	de, -274
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	a, l
	call	__bshru
	ld	de, -277
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	or	a, a
	sbc	hl, hl
	push	ix
	ld	de, -265
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	a, (ix + 6)
	call	__bshru
	ld	de, -280
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	ld	a, (_reg_control)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	c, 10
	push	ix
	ld	de, -271
	add	ix, de
	ld	(ix), hl
	pop	ix
	call	__ishl
	lea	bc, iy
	call	__iand
	push	hl
	pop	iy
	ld	a, (_triggerSpriteZero)
	ld	de, (ix - 3)
	xor	a, e
	bit	0, a
	jq	nz, BB4_2
	ld	hl, _reg_ppuStatus
	set	6, (hl)
	xor	a, a
	ld	(_triggerSpriteZero), a
BB4_2:
	ld	bc, -262
	lea	hl, ix
	add	hl, bc
	push	ix
	ld	bc, -286
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -265
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	l, (ix + 6)
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (_reg_mask)
	ld	l, a
	bit	3, l
	jq	nz, BB4_4
	ld	iyh, 0
	push	ix
	ld	bc, -294
	add	ix, bc
	push	af
	ld	a, iyh
	ld	(ix), a
	pop	af
	pop	ix
	jq	BB4_26
BB4_4:
	push	ix
	ld	bc, -283
	add	ix, bc
	ld	(ix), d
	pop	ix
	ld	a, (_oamRAM)
	ld	e, a
	bit	4, l
	ld	h, 0
	ld	c, l
	ld	b, h
	ld	a, b
	jq	z, BB4_10
	ld	a, (ix + 6)
	cp	a, e
	ld	a, b
	jq	c, BB4_10
	ld	bc, 0
	ld	c, e
	ld	de, -265
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, -8
	add	hl, de
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB4_7
	ld	a, 0
	jq	BB4_9
BB4_7:
	ld	a, 1
BB4_9:
	ld	h, 0
	ld	c, l
	ld	b, h
BB4_10:
	ld	de, -294
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	or	a, a
	sbc	hl, hl
	push	ix
	ld	de, -274
	add	ix, de
	ld	l, (ix)
	pop	ix
	push	ix
	ld	de, -297
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, -277
	lea	hl, ix
	add	hl, de
	ld	a, (hl)
	push	ix
	ld	de, -280
	add	ix, de
	ld	l, (ix)
	pop	ix
	add	a, l
	push	ix
	ld	de, -298
	add	ix, de
	ld	(ix), a
	pop	ix
	and	a, 31
	ld	de, 8192
	add	iy, de
	push	ix
	ld	de, -301
	add	ix, de
	ld	(ix), iy
	pop	ix
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	iyl, c
	ld	iyh, b
	ld	c, 5
	call	__ishl
	push	ix
	ld	de, -304
	add	ix, de
	ld	(ix), hl
	pop	ix
	sla	a
	and	a, 56
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	(ix - 3), de
	push	ix
	ld	de, -307
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	c, 8
	ld	de, -271
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	call	__ishl
	ld	bc, 4096
	call	__iand
	push	ix
	ld	de, -310
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	a, (ix + 6)
	and	a, 7
	ld	de, (ix - 3)
	push	de
	pop	hl
	ld	l, a
	ld	(ix - 3), bc
	push	ix
	ld	bc, -313
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -268
	lea	hl, ix
	add	hl, bc
	ld	e, (hl)
	push	ix
	ld	bc, -265
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	push	ix
	ld	bc, -316
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	ix
	ld	bc, -283
	add	ix, bc
	ld	a, (ix)
	pop	ix
	and	a, 7
	ld	e, iyl
	ld	d, iyh
	ld	e, a
	ld	bc, -268
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	ld.sis	hl, 7
	or	a, a
	sbc.sis	hl, de
	push	ix
	ld	bc, -274
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	de, 33
	push	ix
	ld	bc, -286
	add	ix, bc
	ld	iy, (ix)
	pop	ix
	push	ix
	ld	bc, -280
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, (ix - 3)
	ld	bc, 0
	ld	(ix - 3), bc
	ld	bc, -268
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
BB4_11:
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB4_25
	ld	de, -289
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	bc
	pop	hl
	ld	bc, -297
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	add	hl, de
	push	ix
	ld	de, -277
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, 31
	call	__iand
	push	ix
	ld	de, -283
	add	ix, de
	ld	(ix), hl
	pop	ix
	push	ix
	ld	de, -277
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	c, 5
	call	__ishl
	ld	bc, 15360
	call	__iand
	ld	(ix - 3), bc
	push	ix
	ld	bc, -301
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	ex	de, hl
	ld	bc, -293
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	ix
	ld	bc, -283
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	add	hl, de
	push	ix
	ld	bc, -304
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	push	hl
	ld	bc, (ix - 3)
	call	_bus_readPPU
	ld	de, -290
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	pop	hl
	ld	de, -283
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	c, 2
	call	__ishru
	ld	(ix - 3), bc
	ld	bc, -307
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	add	hl, de
	push	ix
	ld	bc, -293
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	ld.sis	de, 960
	add.sis	hl, de
	push	hl
	ld	bc, (ix - 3)
	call	_bus_readPPU
	ld	l, a
	pop	de
	ld	bc, -277
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	ld	b, 2
	call	__bshru
	bit	1, e
	jq	z, BB4_14
	ld	l, a
BB4_14:
	ld	a, l
	ld	b, 4
	call	__bshru
	ld	de, -298
	lea	iy, ix
	add	iy, de
	bit	1, (iy)
	jq	z, BB4_16
	ld	l, a
BB4_16:
	ld	a, l
	and	a, 3
	ld	l, a
	ld	de, -319
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	or	a, a
	sbc	hl, hl
	push	ix
	ld	de, -290
	add	ix, de
	ld	l, (ix)
	pop	ix
	ld	c, 4
	call	__ishl
	ld	(ix - 3), bc
	push	ix
	ld	bc, -310
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	push	ix
	ld	bc, -313
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	push	ix
	ld	de, -277
	add	ix, de
	ld	(ix), hl
	pop	ix
	push	hl
	ld	bc, (ix - 3)
	call	_bus_readPPU
	ld	bc, -290
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	pop	hl
	ld.sis	de, 8
	ld	bc, -277
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add.sis	hl, de
	push	hl
	call	_bus_readPPU
	ld	bc, -293
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	pop	hl
	ld	bc, -274
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -277
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	hl, 7
BB4_17:
	ld	bc, -283
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, 0
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	de, -289
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	bc, (hl)
	jq	m, BB4_18
	ld	(ix - 3), bc
	ld	bc, -293
	lea	hl, ix
	add	hl, bc
	ld	d, (hl)
	ld	a, d
	sla	a
	and	a, 2
	ld	l, a
	ld	bc, -290
	lea	iy, ix
	add	iy, bc
	ld	h, (iy)
	ld	a, h
	and	a, 1
	ld	e, a
	ld	a, l
	add	a, e
	ld	e, a
	srl	h
	push	ix
	add	ix, bc
	ld	(ix), h
	pop	ix
	srl	d
	ld	bc, -293
	lea	hl, ix
	add	hl, bc
	ld	(hl), d
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	ld	bc, 32
	or	a, a
	sbc	hl, bc
	jq	z, BB4_21
	ld	bc, -280
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(ix - 3), de
	push	ix
	ld	de, -283
	add	ix, de
	ld	bc, (ix)
	pop	ix
	add	iy, bc
	ld	de, (ix - 3)
	ld	(iy), e
BB4_21:
	ld	a, e
	or	a, a
	jq	nz, BB4_23
	ld	hl, 16128
	push	hl
	call	_bus_readPPU
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	c, 2
	call	__ishl
	push	hl
	pop	de
	ld	iy, _ppu_colors
	add	iy, de
	ld	hl, (iy)
	ld	e, (iy + 3)
	jq	BB4_24
BB4_23:
	ld	l, e
	push	hl
	ld	bc, -319
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_ppu_getColor
	pop	bc
	pop	bc
BB4_24:
	ld	(ix - 3), de
	ld	de, -316
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	push	bc
	push	ix
	ld	de, -277
	add	ix, de
	ld	bc, (ix)
	pop	ix
	push	bc
	ld	de, (ix - 3)
	push	de
	push	hl
	call	_ppu_setPixel
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -283
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	dec	hl
	ld	bc, -277
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	dec.sis	de
	push	ix
	add	ix, bc
	ld	(ix), de
	pop	ix
	jq	BB4_17
BB4_18:
	inc	bc
	ld.sis	de, 8
	ld	(ix - 3), bc
	ld	bc, -274
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add.sis	hl, de
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -280
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	lea	iy, iy + 8
	push	ix
	add	ix, bc
	ld	(ix), iy
	pop	ix
	ld	bc, -268
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	de, 33
	jq	BB4_11
BB4_25:
	ld	a, (_reg_mask)
	ld	l, a
BB4_26:
	bit	4, l
	jq	nz, BB4_27
BB4_49:
	ld	sp, ix
	pop	ix
	ret
BB4_27:
	ld	de, -265
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	bc, -8
	add	hl, bc
	push	ix
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	c, 9
	ld	de, -271
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	call	__ishl
	ld	bc, 4096
	call	__iand
	push	ix
	ld	de, -274
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	bc, 256
	or	a, a
	sbc	hl, hl
BB4_28:
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_49
	ld	bc, -268
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	bc, -271
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	ld	hl, _oamRAM
	add	hl, de
	ld	e, (hl)
	ld	bc, 0
	ld	c, e
	ld	(ix - 3), de
	ld	de, -265
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	de, (ix - 3)
	jq	p, BB4_48
	ld	a, (ix + 6)
	cp	a, e
	jq	nc, BB4_31
BB4_48:
	ld	de, 4
	ld	bc, -271
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	ld	de, -268
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	bc, 256
	jq	BB4_28
BB4_31:
	ld	a, (ix + 6)
	sub	a, e
	ld	e, a
	ld	bc, -271
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 2
	call	__ior
	push	hl
	pop	bc
	ld	hl, _oamRAM
	add	hl, bc
	ld	bc, -277
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	c, (hl)
	ld	a, 7
	sub	a, e
	ld	l, a
	ld	(ix - 3), de
	push	ix
	ld	de, -290
	add	ix, de
	ld	(ix), c
	pop	ix
	ld	a, c
	cp	a, 0
	call	__setflag
	ld	de, (ix - 3)
	jq	p, BB4_33
	ld	e, l
BB4_33:
	ld	bc, -271
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 1
	call	__ior
	push	hl
	pop	bc
	ld	hl, _oamRAM
	push	hl
	pop	iy
	add	iy, bc
	ld	bc, -283
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	c, 4
	call	__ishl
	ld	iyl, e
	push	ix
	ld	de, -274
	add	ix, de
	ld	bc, (ix)
	pop	ix
	add	hl, bc
	ld	de, 0
	ld	e, iyl
	ld	bc, -289
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	add	hl, de
	push	hl
	call	_bus_readPPU
	ld	de, -280
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	de, -283
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	l, (iy)
	ld	c, 4
	call	__ishl
	push	hl
	pop	de
	ld	(ix - 3), de
	ld	de, -274
	lea	iy, ix
	add	iy, de
	ld	hl, (iy)
	push	ix
	ld	de, -289
	add	ix, de
	ld	bc, (ix)
	pop	ix
	add	hl, bc
	ld	de, (ix - 3)
	add	hl, de
	ld.sis	de, 8
	add.sis	hl, de
	push	hl
	call	_bus_readPPU
	ld	de, -283
	lea	hl, ix
	add	hl, de
	ld	(hl), a
	pop	hl
	ld	de, -277
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	a, (hl)
	and	a, 3
	ld	de, -271
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	bc, 3
	call	__ior
	ld	de, -293
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	add	a, 4
	ld	l, a
	push	ix
	ld	de, -297
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, -271
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iyl, 1
	jq	z, BB4_35
	ld	iyl, 0
BB4_35:
	ld	bc, -294
	lea	hl, ix
	add	hl, bc
	bit	0, (hl)
	jq	nz, BB4_37
	ld	bc, -268
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ex	de, hl
	ld	iyl, d
	ex	de, hl
BB4_37:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	hl, 7
BB4_38:
	push	ix
	ld	de, -277
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, 0
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB4_48
	ld	de, -289
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	push	ix
	ld	bc, -283
	add	ix, bc
	ld	d, (ix)
	pop	ix
	ld	a, d
	sla	a
	and	a, 2
	ld	l, a
	push	ix
	ld	bc, -280
	add	ix, bc
	ld	h, (ix)
	pop	ix
	ld	a, h
	and	a, 1
	ld	e, a
	ld	a, l
	add	a, e
	ld	c, a
	srl	h
	ld	(ix - 3), bc
	push	ix
	ld	bc, -280
	add	ix, bc
	ld	(ix), h
	pop	ix
	srl	d
	ld	bc, -283
	lea	hl, ix
	add	hl, bc
	ld	(hl), d
	or	a, a
	ld	bc, (ix - 3)
	jq	z, BB4_47
	ld	de, -298
	lea	hl, ix
	add	hl, de
	push	af
	ld	a, iyl
	ld	(hl), a
	pop	af
	ld	de, -290
	lea	iy, ix
	add	iy, de
	bit	6, (iy)
	push	ix
	ld	de, -277
	push	af
	add	ix, de
	pop	af
	ld	iy, (ix)
	pop	ix
	jq	z, BB4_42
	ld	de, -289
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
BB4_42:
	ld	hl, _oamRAM
	ld	(ix - 3), bc
	push	ix
	ld	bc, -293
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	ld	a, (hl)
	add	a, iyl
	ld	iyl, a
	ld	de, 0
	ld	e, iyl
	ld	bc, -286
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	ld	a, (hl)
	or	a, a
	ld	bc, (ix - 3)
	jq	z, BB4_44
	ld	de, -290
	lea	hl, ix
	add	hl, de
	bit	5, (hl)
	jq	nz, BB4_45
BB4_44:
	push	bc
	ld	bc, -297
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -301
	lea	hl, ix
	add	hl, bc
	push	af
	ld	a, iyl
	ld	(hl), a
	pop	af
	call	_ppu_getColor
	pop	bc
	pop	bc
	ld	bc, 0
	ld	c, (ix + 6)
	push	bc
	ld	bc, 0
	ld	(ix - 3), de
	ld	de, -301
	lea	iy, ix
	add	iy, de
	ld	c, (iy)
	push	bc
	ld	de, (ix - 3)
	push	de
	push	hl
	call	_ppu_setPixel
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB4_45:
	ld	bc, -298
	lea	hl, ix
	add	hl, bc
	push	af
	ld	a, (hl)
	ld	iyl, a
	pop	af
	ld	a, iyl
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB4_47
	ld	a, 1
	ld	(_triggerSpriteZero), a
BB4_47:
	ld	de, -277
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	dec	hl
	push	ix
	ld	de, -289
	add	ix, de
	ld	bc, (ix)
	pop	ix
	inc	bc
	jq	BB4_38
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_setStatusFlag
_ppu_setStatusFlag:
	call	__frameset0
	ld	e, (ix + 6)
	ld	a, (_reg_ppuStatus)
	ld	c, a
	ld	a, e
	cpl
	ld	l, a
	ld	a, c
	and	a, l
	ld	l, a
	ld	a, c
	or	a, e
	bit	0, (ix + 9)
	jq	nz, BB5_2
	ld	a, l
BB5_2:
	ld	(_reg_ppuStatus), a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_setPixel
_ppu_setPixel:
	ld	hl, -3
	call	__frameset
	ld	bc, (ix + 12)
	ld.sis	de, 256
	ld	l, c
	ld	h, b
	or	a, a
	sbc.sis	hl, de
	jq	nc, BB6_7
	ld	iy, (ix + 15)
	ld.sis	de, 0
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc.sis	hl, de
	call	__setflag
	jq	m, BB6_7
	ld.sis	de, 240
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc.sis	hl, de
	call	__setflag
	jq	p, BB6_7
	ld	iy, (ix + 6)
	ld	e, (ix + 9)
	ld	a, b
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	h, a
	ld	l, c
	ld	(ix - 3), hl
	lea	hl, iy
	call	__lcmpzero
	jq	nz, BB6_4
	ld	a, 0
	jq	BB6_6
BB6_4:
	ld	a, 1
BB6_6:
	rrc	a
	sbc	hl, hl
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_SetPixel
	pop	hl
	pop	hl
BB6_7:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_drawTile
_ppu_drawTile:
	ld	hl, -17
	call	__frameset
	ld	a, (ix + 6)
	ld	hl, (ix + 9)
	ld.sis	de, 0
	ld	c, 4
	call	__sshl
	bit	0, a
	jq	nz, BB7_1
	ld	c, e
	ld	b, d
	jq	BB7_3
BB7_1:
	ld.sis	bc, 4096
BB7_3:
	ld.sis	iy, 8
	add.sis	hl, bc
	ld	(ix - 11), hl
	bit	0, a
	jq	nz, BB7_4
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	jq	BB7_6
BB7_4:
	ld.sis	hl, 136
BB7_6:
	ld	bc, (ix + 15)
	add.sis	hl, bc
	ld	(ix - 14), hl
	ld.sis	hl, 8
	ld	c, e
	ld	b, d
	ld	e, l
	ld	d, h
BB7_7:
	ld	l, c
	ld	h, b
	or	a, a
	sbc.sis	hl, de
	jq	z, BB7_12
	ld	e, c
	ld	d, b
	ld	iy, (ix - 11)
	add.sis	iy, de
	ld	(ix - 3), iy
	ld.sis	de, 8
	add.sis	iy, de
	push	iy
	ld	(ix - 6), bc
	call	_bus_readPPU
	ld	(ix - 7), a
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	call	_bus_readPPU
	ld.sis	hl, 0
	ld	e, l
	ld	d, h
	ld	(ix - 8), a
	pop	hl
	ld	hl, (ix - 6)
	ld	bc, (ix + 18)
	add.sis	hl, bc
	ld	(ix - 17), hl
	ld	l, e
	ld	h, d
	ld.sis	de, 8
BB7_9:
	ld	(ix - 3), hl
	ld.sis	bc, -8
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB7_10
	ld	c, (ix - 7)
	ld	a, c
	sla	a
	and	a, 2
	ld	l, a
	ld	d, (ix - 8)
	ld	a, d
	and	a, 1
	ld	e, a
	ld	a, l
	add	a, e
	ld	l, a
	srl	c
	ld	(ix - 7), c
	srl	d
	ld	(ix - 8), d
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_ppu_getColor
	pop	bc
	pop	bc
	ld	iy, (ix - 14)
	ld	bc, (ix - 3)
	add.sis	iy, bc
	ld	bc, (ix - 17)
	push	bc
	push	iy
	push	de
	push	hl
	call	_ppu_setPixel
	ld.sis	de, 8
	ld	hl, (ix - 3)
	pop	bc
	pop	bc
	pop	bc
	pop	bc
	dec.sis	hl
	jq	BB7_9
BB7_10:
	ld	bc, (ix - 6)
	inc.sis	bc
	jq	BB7_7
BB7_12:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_getColor
_ppu_getColor:
	call	__frameset0
	ld	a, (ix + 9)
	ld.sis	iy, 16128
	ld	d, 0
	ld	e, (ix + 6)
	ld	c, 2
	ld	l, e
	ld	h, d
	call	__sshl
	ld	c, iyl
	ld	b, iyh
	add.sis	hl, bc
	ld	e, a
	add.sis	hl, de
	push	hl
	call	_bus_readPPU
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	c, 2
	call	__ishl
	push	hl
	pop	de
	ld	iy, _ppu_colors
	add	iy, de
	ld	e, (iy + 3)
	ld	hl, (iy)
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_getControlFlag
_ppu_getControlFlag:
	call	__frameset0
	ld	l, (ix + 6)
	ld	a, (_reg_control)
	and	a, l
	or	a, a
	jq	nz, BB9_1
	ld	a, 0
	jq	BB9_3
BB9_1:
	ld	a, 1
BB9_3:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_getMaskFlag
_ppu_getMaskFlag:
	call	__frameset0
	ld	l, (ix + 6)
	ld	a, (_reg_mask)
	and	a, l
	or	a, a
	jq	nz, BB10_1
	ld	a, 0
	jq	BB10_3
BB10_1:
	ld	a, 1
BB10_3:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_PrintCentered
_PrintCentered:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, 320
	or	a, a
	sbc	hl, de
	ld	c, 1
	call	__ishru
	ld	de, 116
	push	de
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_PrintStringXY
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_drawCHRROM
_ppu_drawCHRROM:
	ld	hl, -18
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 6), hl
	ld.sis	iy, 0
	ld.sis	de, 16
BB12_1:
	ld	(ix - 3), iy
	ld	c, iyl
	ld	b, iyh
BB12_2:
	ld	l, c
	ld	h, b
	or	a, a
	sbc.sis	hl, de
	jq	z, BB12_9
	ld	(ix - 9), bc
	ld	l, c
	ld	h, b
	ld	c, 3
	call	__sshl
	ld	(ix - 12), hl
	ld	bc, (ix - 3)
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
BB12_4:
	push	hl
	pop	iy
	ld.sis	de, 128
	or	a, a
	sbc.sis	hl, de
	jq	z, BB12_5
	ld	hl, (ix - 6)
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	ld	a, 1
	ld	l, a
	jq	nz, BB12_8
	ld	a, 0
	ld	l, a
BB12_8:
	ld	de, (ix - 12)
	push	de
	ld	(ix - 18), iy
	push	iy
	push	hl
	push	bc
	push	hl
	ld	(ix - 15), bc
	call	_ppu_drawTile
	ld	bc, (ix - 15)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 18)
	ld.sis	de, 8
	add.sis	hl, de
	inc.sis	bc
	jq	BB12_4
BB12_5:
	ld	bc, (ix - 9)
	inc.sis	bc
	ld.sis	de, 16
	ld	hl, (ix - 3)
	add.sis	hl, de
	ld	(ix - 3), hl
	ld.sis	iy, 0
	jq	BB12_2
BB12_9:
	ld	hl, (ix - 6)
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	ld.sis	hl, 1
	ld	(ix - 6), hl
	jq	z, BB12_1
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_drawRAMPalette
_ppu_drawRAMPalette:
	ld	hl, -6
	call	__frameset
	ld.sis	de, 16128
	ld	hl, 32
BB13_1:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB13_2
	push	de
	ld	(ix - 3), de
	ld	(ix - 6), hl
	call	_bus_readPPU
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	pop	bc
	dec	hl
	inc.sis	de
	jq	BB13_1
BB13_2:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_getDisplayBitmap
_ppu_getDisplayBitmap:
	ld	hl, 0
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_getStatusFlag
_ppu_getStatusFlag:
	call	__frameset0
	ld	l, (ix + 6)
	ld	a, (_reg_ppuStatus)
	and	a, l
	or	a, a
	jq	nz, BB15_1
	ld	a, 0
	jq	BB15_3
BB15_1:
	ld	a, 1
BB15_3:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_setMaskFlag
_ppu_setMaskFlag:
	call	__frameset0
	ld	e, (ix + 6)
	ld	a, (_reg_mask)
	ld	c, a
	ld	a, e
	cpl
	ld	l, a
	ld	a, c
	and	a, l
	ld	l, a
	ld	a, c
	or	a, e
	bit	0, (ix + 9)
	jq	nz, BB16_2
	ld	a, l
BB16_2:
	ld	(_reg_mask), a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_setControlFlag
_ppu_setControlFlag:
	call	__frameset0
	ld	e, (ix + 6)
	ld	a, (_reg_control)
	ld	c, a
	ld	a, e
	cpl
	ld	l, a
	ld	a, c
	and	a, l
	ld	l, a
	ld	a, c
	or	a, e
	bit	0, (ix + 9)
	jq	nz, BB17_2
	ld	a, l
BB17_2:
	ld	(_reg_control), a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ppu_getRegister
_ppu_getRegister:
	call	__frameset0
	ld	bc, (ix + 6)
	xor	a, a
	ld	de, 9
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	c, BB18_1
BB18_17:
	ld	c, a
BB18_18:
	ld	a, c
	pop	ix
	ret
BB18_1:
	ld	hl, LJTI18_0
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB18_2:
	ld	a, (_reg_control)
	jq	BB18_17
BB18_3:
	ld	a, (_reg_mask)
	jq	BB18_17
BB18_4:
	ld	iy, _reg_ppuStatus
	ld	l, a
	ld	a, (_reg_ppuStatus)
	ld	c, a
	res	7, (iy)
	ld	a, l
	ld	(_addressLatch), a
	ld	(_scrollLatch), a
	jq	BB18_18
BB18_5:
	ld	a, (_reg_oamaddr)
	jq	BB18_17
BB18_6:
	ld	hl, _oamRAM
	ld	a, (_reg_oamaddr)
	ld	de, 0
	ld	e, a
	add	hl, de
	ld	c, (hl)
	jq	BB18_18
BB18_7:
	ld	a, (_reg_scroll)
	jq	BB18_17
BB18_8:
	ld	hl, _addressBuffer
	ld	de, (hl)
	ld.sis	bc, 16128
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	nc, BB18_10
	ld	a, (_dataBuffer)
	ld	(_reg_ppudata), a
	push	de
	call	_bus_readPPU
	pop	hl
	ld	(_dataBuffer), a
	ld	a, (_reg_ppudata)
	ld	c, a
	jq	BB18_11
BB18_15:
	ld	a, (_reg_ppuaddr)
	jq	BB18_17
BB18_16:
	ld	a, (_reg_oamdma)
	jq	BB18_17
BB18_10:
	push	de
	call	_bus_readPPU
	ld	c, a
	pop	de
	ld	(_reg_ppudata), a
BB18_11:
	ld	a, (_reg_control)
	bit	2, a
	jq	z, BB18_12
	ld.sis	iy, 32
	jq	BB18_14
BB18_12:
	ld.sis	iy, 1
BB18_14:
	ld	hl, _addressBuffer
	ld	de, (hl)
	add.sis	iy, de
	push	de
	ld	e, iyl
	ld	d, iyh
	ld	(hl), e
	inc	hl
	ld	(hl), d
	pop	de
	jq	BB18_18
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI18_0:
	private	LJTI18_0
LJTI18_0:
	dl	BB18_2
	dl	BB18_3
	dl	BB18_4
	dl	BB18_5
	dl	BB18_6
	dl	BB18_7
	dl	BB18_8
	dl	BB18_15
	dl	BB18_16

	section	.text,"ax",@progbits
	public	_ppu_setRegister
_ppu_setRegister:
	ld	hl, -6
	call	__frameset
	ld	bc, (ix + 6)
	xor	a, a
	ld	de, 9
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	c, BB19_2
BB19_1:
	ld	sp, ix
	pop	ix
	ret
BB19_2:
	ld	e, (ix + 9)
	ld	iy, _oamRAM
	ld	d, 1
	ld	hl, LJTI19_0
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	jp	(hl)
BB19_3:
	ld	a, e
	ld	(_reg_control), a
	jq	BB19_1
BB19_4:
	ld	a, e
	ld	(_reg_mask), a
	jq	BB19_1
BB19_5:
	ld	(_addressLatch), a
	ld	(_scrollLatch), a
	ld	a, e
	and	a, 127
	ld	(_reg_ppuStatus), a
	jq	BB19_1
BB19_6:
	ld	a, e
	ld	(_reg_oamaddr), a
	jq	BB19_1
BB19_7:
	ld	a, e
	ld	(_reg_oamdata), a
	ld	a, (_reg_oamaddr)
	ld	l, e
	ld	de, 0
	ld	e, a
	add	iy, de
	ld	(iy), l
	jq	BB19_1
BB19_8:
	ld	c, e
	ld	a, (_scrollLatch)
	ld	e, a
	xor	a, d
	bit	0, a
	jq	nz, BB19_19
	ld	hl, _scrollY
	jq	BB19_20
BB19_10:
	ld	a, e
	ld	(_reg_ppudata), a
	ld	hl, _addressBuffer
	ld	hl, (hl)
	push	de
	push	hl
	call	_bus_writePPU
	pop	hl
	pop	hl
	ld	a, (_reg_control)
	bit	2, a
	jq	z, BB19_21
	ld.sis	hl, 32
	jq	BB19_22
BB19_12:
	ld	a, (_addressLatch)
	xor	a, d
	bit	0, a
	jq	z, BB19_23
	ld	a, e
	ld	(_reg_ppuaddr), a
	ld	a, d
	jq	BB19_14
BB19_15:
	ld	h, 0
	ld	l, e
	ld	c, 8
	call	__sshl
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	ld	bc, 0
BB19_16:
	ld	(ix - 3), bc
	push	bc
	pop	hl
	ld	bc, 256
	or	a, a
	sbc	hl, bc
	jq	z, BB19_18
	push	iy
	ld	(ix - 6), iy
	call	_bus_readCPU
	ld	iy, (ix - 6)
	ld	bc, (ix - 3)
	ld	e, (ix + 9)
	pop	hl
	ld	hl, _oamRAM
	add	hl, bc
	ld	(hl), a
	inc	bc
	inc.sis	iy
	jq	BB19_16
BB19_18:
	ld	a, e
	ld	(_reg_oamdma), a
	jq	BB19_1
BB19_19:
	ld	hl, _scrollX
BB19_20:
	ld	a, e
	xor	a, 1
	ld	e, c
	ld	(hl), e
	ld	(_scrollLatch), a
	ld	a, e
	ld	(_reg_scroll), a
	jq	BB19_1
BB19_21:
	ld.sis	hl, 1
BB19_22:
	ld	de, _addressBuffer
	push	de
	pop	iy
	ld	de, (iy)
	add.sis	hl, de
	ld	(iy), l
	ld	(iy + 1), h
	jq	BB19_1
BB19_23:
	ld	a, (_reg_ppuaddr)
	ld	l, a
	ld	h, 0
	ld	c, 8
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	call	__sshl
	ld	c, iyl
	ld	b, iyh
	ld	c, e
	add.sis	hl, bc
	ld	iy, _addressBuffer
	ld	(iy), l
	ld	(iy + 1), h
	xor	a, a
BB19_14:
	ld	(_addressLatch), a
	jq	BB19_1
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI19_0:
	private	LJTI19_0
LJTI19_0:
	dl	BB19_3
	dl	BB19_4
	dl	BB19_5
	dl	BB19_6
	dl	BB19_7
	dl	BB19_8
	dl	BB19_10
	dl	BB19_12
	dl	BB19_15

	section	.bss,"aw",@nobits
	public	_reg_control
_reg_control:
	rb	1

	section	.bss,"aw",@nobits
	public	_reg_mask
_reg_mask:
	rb	1

	section	.bss,"aw",@nobits
	public	_reg_ppuStatus
_reg_ppuStatus:
	rb	1

	section	.bss,"aw",@nobits
	public	_reg_oamaddr
_reg_oamaddr:
	rb	1

	section	.bss,"aw",@nobits
	public	_reg_oamdata
_reg_oamdata:
	rb	1

	section	.bss,"aw",@nobits
	public	_reg_scroll
_reg_scroll:
	rb	1

	section	.bss,"aw",@nobits
	public	_reg_ppuaddr
_reg_ppuaddr:
	rb	1

	section	.bss,"aw",@nobits
	public	_reg_ppudata
_reg_ppudata:
	rb	1

	section	.bss,"aw",@nobits
	public	_reg_oamdma
_reg_oamdma:
	rb	1

	section	.bss,"aw",@nobits
	public	_addressBuffer
_addressBuffer:
	rb	2

	section	.bss,"aw",@nobits
	public	_scrollX
_scrollX:
	rb	1

	section	.bss,"aw",@nobits
	public	_scrollY
_scrollY:
	rb	1

	section	.bss,"aw",@nobits
	public	_dataBuffer
_dataBuffer:
	rb	1

	section	.bss,"aw",@nobits
	public	_addressLatch
_addressLatch:
	rb	1

	section	.bss,"aw",@nobits
	public	_scrollLatch
_scrollLatch:
	rb	1

	section	.bss,"aw",@nobits
	public	_triggerSpriteZero
_triggerSpriteZero:
	rb	1

	section	.bss,"aw",@nobits
	public	_ppuCycles
_ppuCycles:
	rb	4

	section	.bss,"aw",@nobits
	public	_ppuFrames
_ppuFrames:
	rb	4

	section	.bss,"aw",@nobits
	public	_scanline
_scanline:
	rb	2

	section	.bss,"aw",@nobits
	public	_vidRAM_Ptr
_vidRAM_Ptr:
	rb	3

	section	.bss,"aw",@nobits
	public	_chrROM_Ptr
_chrROM_Ptr:
	rb	3

	section	.bss,"aw",@nobits
	public	_oamRAM
_oamRAM:
	rb	255

	section	.rodata,"a",@progbits
	private	_ppu_colors
_ppu_colors:
	dd	7697781
	dd	2562959
	dd	171
	dd	4653215
	dd	9371767
	dd	11206675
	dd	10944512
	dd	8325888
	dd	4402944
	dd	18176
	dd	20736
	dd	16151
	dd	1785695
	dd	0
	dd	0
	dd	0
	dd	12369084
	dd	29679
	dd	2309103
	dd	8585459
	dd	12517567
	dd	15138907
	dd	14363392
	dd	13324047
	dd	9138944
	dd	38656
	dd	43776
	dd	37691
	dd	33675
	dd	0
	dd	0
	dd	0
	dd	16777215
	dd	4177919
	dd	6264831
	dd	10980349
	dd	16219135
	dd	16742327
	dd	16742243
	dd	16751419
	dd	15974207
	dd	8639251
	dd	5234507
	dd	5830808
	dd	60379
	dd	0
	dd	0
	dd	0
	dd	16777215
	dd	11266047
	dd	13096959
	dd	14142463
	dd	16762879
	dd	16762843
	dd	16760755
	dd	16767915
	dd	16770979
	dd	14942115
	dd	11269055
	dd	11796431
	dd	10485747
	dd	0
	dd	0
	dd	0

	ident	"clang version 14.0.0 (https://github.com/jacobly0/llvm-project a139def90d26173f771eb1eca797633d1fbb2797)"
	extern	__Unwind_SjLj_Register
	extern	_bus_readPPU
	extern	_bus_writePPU
	extern	__lcmpzero
	extern	__sshl
	extern	_bus_ppuReport
	extern	__ishl
	extern	__ladd
	extern	__setflag
	extern	__iand
	extern	_gfx_SetDefaultPalette
	extern	_bus_readCPU
	extern	__frameset
	extern	_gfx_GetStringWidth
	extern	__ior
	extern	__ishru
	extern	__Unwind_SjLj_Unregister
	extern	_gfx_SetPixel
	extern	_gfx_SetColor
	extern	_gfx_PrintStringXY
	extern	__lcmpu
	extern	__bshru
	extern	__frameset0
