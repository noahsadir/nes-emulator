	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_cpu_init
_cpu_init:
	ld	hl, -4
	call	__frameset
	ld	hl, 55
	ld	(ix - 3), hl
	call	_cpu_reset
	call	_bus_startTimeMonitor
	ld.sis	bc, -3
BB0_1:
	ld	a, (_didPanic)
	ld	e, a
	ld	hl, (ix - 3)
	ld	a, l
	cp	a, 54
	jq	z, BB0_5
	ld	hl, _reg_pc
	ld	hl, (hl)
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB0_5
	ld	a, e
	or	a, a
	jq	nz, BB0_5
	ld	a, (_cycles)
	ld	(ix - 4), a
	call	_cpu_execute
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix - 3), hl
	ld	a, (_cycles)
	ld	l, (ix - 4)
	sub	a, l
	ld	l, a
	push	hl
	call	_bus_cpuReport
	ld.sis	bc, -3
	pop	hl
	jq	BB0_1
BB0_5:
	ld	sp, ix
	pop	ix
	jp	_bus_endTimeMonitor
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_vblankNMI
_cpu_vblankNMI:
	ld	hl, _reg_pc
	ld	hl, (hl)
	push	hl
	call	_cpu_stackPush16
	pop	hl
	ld	a, (_reg_status)
	ld	l, a
	push	hl
	call	_cpu_stackPush
	pop	hl
	ld	hl, _reg_status
	set	2, (hl)
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 2
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	hl, -6
	push	hl
	call	_bus_readCPUAddr
	pop	de
	ld	iy, _reg_pc
	ld	(iy), l
	ld	(iy + 1), h
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_stackPush16
_cpu_stackPush16:
	ld	hl, -3
	call	__frameset
	ld	h, 0
	ld	a, (_stackPointer)
	ld	l, a
	cp	a, 1
	jq	nz, BB2_2
	call	_exc_panic_stackOverflow
	jq	BB2_3
BB2_2:
	ld	iy, (ix + 6)
	ld.sis	de, 256
	ld	(ix - 3), hl
	add.sis	hl, de
	ld	e, iyh
	push	de
	push	hl
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, _stackPointer
	dec	(hl)
	ld	de, (ix - 3)
	ld	e, (hl)
	ld	(ix - 3), de
	ld	l, e
	ld	h, d
	ld.sis	de, 256
	add.sis	hl, de
	ld	de, (ix + 6)
	push	de
	push	hl
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, _stackPointer
	dec	(hl)
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 2
	ld	iy, (ix - 3)
	ld	a, iyh
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
BB2_3:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_stackPush
_cpu_stackPush:
	ld	hl, -3
	call	__frameset
	ld	h, 0
	ld	a, (_stackPointer)
	ld	l, a
	or	a, a
	jq	nz, BB3_2
	call	_exc_panic_stackOverflow
	jq	BB3_3
BB3_2:
	ld	a, (ix + 6)
	ld.sis	de, 256
	ld	(ix - 3), hl
	add.sis	hl, de
	ld	e, a
	push	de
	push	hl
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, _stackPointer
	dec	(hl)
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	ld	iy, (ix - 3)
	ld	a, iyh
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
BB3_3:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_setFlag
_cpu_setFlag:
	call	__frameset0
	ld	e, (ix + 6)
	ld	a, (_reg_status)
	ld	c, a
	ld	a, e
	cpl
	ld	l, a
	ld	a, c
	and	a, l
	ld	l, a
	ld	a, c
	or	a, e
	bit	0, (ix + 9)
	jq	nz, BB4_2
	ld	a, l
BB4_2:
	ld	(_reg_status), a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_getCycles
_cpu_getCycles:
	ld	hl, (_cycles)
	ld	a, (_cycles+3)
	ld	e, a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_panic
_cpu_panic:
	ld	a, 1
	ld	(_didPanic), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_fetchAddress
_cpu_fetchAddress:
	ld	hl, -9
	call	__frameset
	ld	de, (ix + 6)
	ld.sis	hl, 0
	ld	(ix - 3), hl
	ld	bc, 13
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nc, BB7_19
	ld	bc, _reg_pc
	ld	hl, LJTI7_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB7_2:
	ld	a, 1
	ld	(_accumulatorAddrMode), a
	jq	BB7_19
BB7_3:
	push	bc
	pop	iy
	ld	hl, (iy)
	ld	(ix - 3), hl
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	jq	BB7_19
BB7_4:
	push	bc
	pop	hl
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	(ix - 3), a
	pop	hl
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	push	hl
	call	_bus_readCPU
	ld	e, a
	pop	hl
	ld	d, 0
	ld	c, 8
	ld	l, e
	ld	h, d
	call	__sshl
	ld	e, (ix - 3)
	add.sis	hl, de
	ld	(ix - 3), hl
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 2
	jq	BB7_17
BB7_5:
	push	bc
	pop	hl
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	e, a
	pop	hl
	ld	d, 0
	ld	(ix - 3), de
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	jq	BB7_17
BB7_6:
	push	bc
	pop	hl
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	(ix - 6), a
	pop	hl
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	push	hl
	call	_bus_readCPU
	pop	hl
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	ld	de, 0
	ld	e, a
	ld	c, 8
	push	de
	pop	hl
	call	__ishl
	ld	(ix - 3), hl
	ld	e, (ix - 6)
	push	hl
	pop	iy
	add	iy, de
	inc	de
	ex	de, hl
	ld	bc, 255
	call	__iand
	push	hl
	pop	de
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	push	iy
	call	_bus_readCPU
	ld	(ix - 6), a
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	call	_bus_readCPU
	ld	h, 0
	ld	e, l
	ld	d, h
	ld	e, a
	pop	hl
	ld	l, e
	ld	h, d
	ld	c, 8
	call	__sshl
	ld	e, (ix - 6)
	ld	(ix - 6), de
	jq	BB7_14
BB7_7:
	push	bc
	pop	hl
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	(ix - 3), a
	pop	hl
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	push	hl
	call	_bus_readCPU
	ld	e, a
	pop	hl
	ld	d, 0
	ld	c, 8
	ld	l, e
	ld	h, d
	call	__sshl
	ld	e, (ix - 3)
	add.sis	hl, de
	ld	iy, _reg_pc
	ld	bc, (iy)
	inc.sis	bc
	ld	(iy), c
	ld	(iy + 1), b
	ld	a, (_reg_x)
	jq	BB7_8
BB7_9:
	push	bc
	pop	hl
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	(ix - 3), a
	pop	hl
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	push	hl
	call	_bus_readCPU
	ld	e, a
	pop	hl
	ld	d, 0
	ld	c, 8
	ld	l, e
	ld	h, d
	call	__sshl
	ld	e, (ix - 3)
	add.sis	hl, de
	ld	iy, _reg_pc
	ld	bc, (iy)
	inc.sis	bc
	ld	(iy), c
	ld	(iy + 1), b
	ld	a, (_reg_y)
BB7_8:
	ld	e, a
	add.sis	hl, de
	ld	(ix - 3), hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 3
	jq	BB7_17
BB7_10:
	push	bc
	pop	hl
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	h, 0
	ld	e, l
	ld	d, h
	ld	e, a
	ld	(ix - 6), de
	pop	hl
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (_reg_x)
	jq	BB7_11
BB7_12:
	push	bc
	pop	hl
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	h, 0
	ld	e, l
	ld	d, h
	ld	e, a
	ld	(ix - 6), de
	pop	hl
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (_reg_y)
BB7_11:
	ld	l, a
	ld	h, d
	add.sis	hl, de
	ld.sis	bc, 255
	call	__sand
	ld	(ix - 3), hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 2
	jq	BB7_15
BB7_13:
	push	bc
	pop	hl
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	h, 0
	ld	e, l
	ld	d, h
	ld	e, a
	ld	(ix - 6), de
	pop	hl
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (_reg_x)
	ld	l, a
	ld	h, d
	add.sis	hl, de
	ld	(ix - 9), hl
	ld.sis	de, 255
	ld	c, e
	ld	b, d
	call	__sand
	push	hl
	call	_bus_readCPU
	ld	(ix - 3), a
	pop	hl
	ld	hl, (ix - 9)
	inc.sis	hl
	ld.sis	bc, 255
	call	__sand
	push	hl
	call	_bus_readCPU
	ld	e, a
	pop	hl
	ld	d, 0
	ld	c, 8
	ld	l, e
	ld	h, d
	call	__sshl
	ld	e, (ix - 3)
BB7_14:
	add.sis	hl, de
	ld	(ix - 3), hl
	ld	bc, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	push	bc
	pop	hl
	ld	bc, 4
BB7_15:
	ld	iy, (ix - 6)
	jq	BB7_18
BB7_16:
	push	bc
	pop	hl
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	(ix - 9), a
	pop	hl
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix - 6), hl
	push	hl
	call	_bus_readCPU
	ld	(ix - 3), a
	pop	hl
	ld	a, (ix - 9)
	inc	a
	ld	hl, (ix - 6)
	ld	l, a
	push	hl
	call	_bus_readCPU
	ld	e, a
	pop	hl
	ld	d, 0
	ld	c, 8
	ld	l, e
	ld	h, d
	call	__sshl
	ld	e, (ix - 3)
	add.sis	hl, de
	ld	a, (_reg_y)
	ld	e, a
	add.sis	hl, de
	ld	(ix - 3), hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 4
BB7_17:
	ld	iyh, 0
BB7_18:
	ld	a, iyh
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
BB7_19:
	ld	hl, (ix - 3)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI7_0:
	private	LJTI7_0
LJTI7_0:
	dl	BB7_2
	dl	BB7_19
	dl	BB7_3
	dl	BB7_4
	dl	BB7_5
	dl	BB7_19
	dl	BB7_6
	dl	BB7_7
	dl	BB7_9
	dl	BB7_10
	dl	BB7_12
	dl	BB7_13
	dl	BB7_16

	section	.text,"ax",@progbits
	public	_cpu_getFlag
_cpu_getFlag:
	call	__frameset0
	ld	l, (ix + 6)
	ld	a, (_reg_status)
	and	a, l
	or	a, a
	jq	nz, BB8_1
	ld	a, 0
	jq	BB8_3
BB8_1:
	ld	a, 1
BB8_3:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_reset
_cpu_reset:
	xor	a, a
	ld	l, 36
	ld	(_reg_accumulator), a
	ld	(_reg_x), a
	ld	(_reg_y), a
	ld	a, l
	ld	(_reg_status), a
	ld	hl, -4
	push	hl
	call	_bus_readCPUAddr
	pop	de
	ld	iy, _reg_pc
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, -3
	ld	(_stackPointer), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_stackPull
_cpu_stackPull:
	ld	hl, -3
	call	__frameset
	ld	h, 0
	ld	a, (_stackPointer)
	ld	l, a
	cp	a, -1
	jq	nz, BB10_2
	ld	(ix - 3), hl
	call	_exc_panic_stackUnderflow
	ld	hl, (ix - 3)
	jq	BB10_3
BB10_2:
	ld.sis	de, 256
	inc	l
	ld	a, l
	ld	(_stackPointer), a
	ld	(ix - 3), hl
	add.sis	hl, de
	push	hl
	call	_bus_readCPU
	ld	d, a
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 2
	ld	iy, (ix - 3)
	ld	a, iyh
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	h, d
BB10_3:
	ld	a, h
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_stackPull16
_cpu_stackPull16:
	ld	hl, -7
	call	__frameset
	ld	h, 0
	ld	a, (_stackPointer)
	ld	l, a
	cp	a, -2
	jq	nz, BB11_2
	call	_exc_panic_stackUnderflow
	ld.sis	hl, 0
	jq	BB11_3
BB11_2:
	ld.sis	de, 256
	inc	l
	ld	a, l
	ld	(_stackPointer), a
	ld	(ix - 3), hl
	add.sis	hl, de
	push	hl
	call	_bus_readCPU
	ld	(ix - 4), a
	pop	hl
	ld	hl, _stackPointer
	inc	(hl)
	ld	de, (ix - 3)
	ld	e, (hl)
	ld	(ix - 3), de
	ld	l, e
	ld	h, d
	ld.sis	de, 256
	add.sis	hl, de
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	(ix - 7), hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 4
	ld	iy, (ix - 3)
	ld	a, iyh
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	de, (ix - 7)
	ld	d, 0
	ld	c, 8
	ld	l, e
	ld	h, d
	call	__sshl
	ld	e, (ix - 4)
	add.sis	hl, de
BB11_3:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_trace
_cpu_trace:
	ld	hl, -173
	call	__frameset
	ld	hl, _reg_pc
	ld	e, 0
	ld	bc, -149
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	lea	iy, ix - 70
	push	ix
	ld	bc, -134
	add	ix, bc
	lea	de, ix
	pop	ix
	ld	hl, (hl)
	push	ix
	ld	bc, -146
	add	ix, bc
	ld	(ix), hl
	pop	ix
	dec.sis	hl
	push	ix
	ld	bc, -137
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, 13
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, bc
	ld	bc, -140
	lea	hl, ix
	push	af
	add	hl, bc
	pop	af
	ld	(hl), de
	push	ix
	ld	bc, -143
	push	af
	add	ix, bc
	pop	af
	ld	(ix), iy
	pop	ix
	jq	c, BB12_2
	or	a, a
	sbc	hl, hl
	ld	de, -155
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	l, 0
	push	hl
	pop	bc
	push	ix
	ld	de, -158
	add	ix, de
	ld	(ix), hl
	pop	ix
	push	ix
	ld	de, -152
	add	ix, de
	jq	BB12_10
BB12_2:
	ld.sis	bc, -3
	ld	iy, 1
	ld	hl, LJTI12_0
	ld	de, (ix + 9)
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB12_3:
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	hl, L_.str
	push	hl
	ld	bc, -143
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
	ld	hl, L_.str
	push	hl
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	bc, -155
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	l, 0
	push	ix
	ld	bc, -158
	jq	BB12_9
BB12_4:
	ld	de, -146
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld.sis	bc, -2
	add.sis	hl, bc
	push	ix
	ld	bc, -146
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	ld	hl, L_.str.1
	push	hl
	ld	bc, -143
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
	pop	hl
	ld	hl, L_.str
	push	hl
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -158
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -146
	jq	BB12_8
BB12_5:
	ld	de, -146
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add.sis	hl, bc
	ld	bc, -161
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld.sis	de, -2
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add.sis	hl, de
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	call	_bus_readCPU
	ld	bc, -149
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	pop	hl
	ld	de, 0
	ld	e, a
	ld	c, 8
	push	de
	pop	hl
	call	__ishl
	ld	(ix - 3), bc
	ld	bc, -149
	lea	iy, ix
	add	iy, bc
	ld	e, (iy)
	add	hl, de
	push	hl
	ld	hl, L_.str.2
	jq	BB12_6
BB12_11:
	ld	de, -146
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld.sis	bc, -2
	add.sis	hl, bc
	push	ix
	ld	bc, -146
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, -161
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	hl
	ld	hl, L_.str.3
	push	hl
	ld	bc, -143
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -158
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -161
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	ld	hl, L_.str.4
	push	hl
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	jq	BB12_22
BB12_12:
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	e, a
	pop	hl
	rlc	a
	sbc	a, a
	ld	d, a
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc.sis	hl
	add.sis	hl, de
	ld	de, 0
	ld	e, l
	ld	d, h
	push	de
	ld	hl, L_.str.2
	push	hl
	ld	bc, -143
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -158
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	hl, L_.str
	push	hl
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
	jq	BB12_24
BB12_13:
	ld	de, -146
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add.sis	hl, bc
	ld	bc, -161
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld.sis	de, -2
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add.sis	hl, de
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	call	_bus_readCPU
	ld	bc, -149
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	pop	hl
	ld	de, 0
	ld	e, a
	ld	c, 8
	push	de
	pop	hl
	call	__ishl
	ld	(ix - 3), bc
	ld	bc, -149
	lea	iy, ix
	add	iy, bc
	ld	e, (iy)
	add	hl, de
	push	hl
	ld	hl, L_.str.5
	push	hl
	ld	de, -143
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	bc, (ix - 3)
	call	_sprintf
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -158
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -149
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	de, (ix + 12)
	ld	l, e
	ld	h, d
	push	hl
	ld	hl, L_.str.6
	push	hl
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	jq	BB12_7
BB12_14:
	ld	de, -146
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add.sis	hl, bc
	ld	bc, -161
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld.sis	de, -2
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add.sis	hl, de
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	call	_bus_readCPU
	ld	bc, -149
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	pop	hl
	ld	de, 0
	ld	e, a
	ld	c, 8
	push	de
	pop	hl
	call	__ishl
	ld	(ix - 3), bc
	ld	bc, -149
	lea	iy, ix
	add	iy, bc
	ld	e, (iy)
	add	hl, de
	push	hl
	ld	hl, L_.str.7
	jq	BB12_6
BB12_15:
	ld	de, -146
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	add.sis	hl, bc
	ld	bc, -161
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld.sis	de, -2
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add.sis	hl, de
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	call	_bus_readCPU
	ld	bc, -149
	lea	hl, ix
	add	hl, bc
	ld	(hl), a
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	pop	hl
	ld	de, 0
	ld	e, a
	ld	c, 8
	push	de
	pop	hl
	call	__ishl
	ld	(ix - 3), bc
	ld	bc, -149
	lea	iy, ix
	add	iy, bc
	ld	e, (iy)
	add	hl, de
	push	hl
	ld	hl, L_.str.8
BB12_6:
	push	hl
	ld	de, -143
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	bc, (ix - 3)
	call	_sprintf
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -158
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -149
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	hl, L_.str
	push	hl
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
BB12_7:
	pop	hl
	pop	hl
	ld	hl, 2
	ld	bc, -155
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -161
BB12_8:
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	ix
	ld	bc, -137
BB12_9:
	add	ix, bc
BB12_10:
	ld	(ix), hl
	pop	ix
	jq	BB12_24
BB12_16:
	ld	de, -146
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld.sis	bc, -2
	add.sis	hl, bc
	push	ix
	ld	bc, -146
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	ld	hl, L_.str.9
	jq	BB12_17
BB12_18:
	ld	de, -146
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld.sis	bc, -2
	add.sis	hl, bc
	push	ix
	ld	bc, -146
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	ld	hl, L_.str.10
BB12_17:
	push	hl
	ld	bc, -143
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -158
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	hl, L_.str
	push	hl
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	jq	BB12_23
BB12_19:
	ld	de, -146
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld.sis	bc, -2
	add.sis	hl, bc
	push	ix
	ld	bc, -146
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, -161
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	hl
	ld	hl, L_.str.11
	push	hl
	ld	bc, -143
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -158
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	a, (_reg_x)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	ld	bc, 255
	call	__iand
	push	ix
	ld	de, -137
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, 0
	ld	hl, (ix + 12)
	ld	e, l
	ld	d, h
	ld	(ix - 3), bc
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	hl
	ld	bc, (ix - 3)
	call	_bus_readCPU
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	ld	bc, -161
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, L_.str.12
	jq	BB12_21
BB12_20:
	ld	de, -146
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld.sis	bc, -2
	add.sis	hl, bc
	push	ix
	ld	bc, -146
	add	ix, bc
	ld	(ix), hl
	pop	ix
	push	hl
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	call	_bus_readCPU
	ld	l, a
	ld	bc, -152
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	e, a
	ld	bc, -161
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, e
	push	hl
	ld	hl, L_.str.13
	push	hl
	ld	bc, -143
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	bc, -158
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -161
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	h, 0
	push	ix
	add	ix, bc
	ld	(ix), hl
	pop	ix
	inc.sis	hl
	push	hl
	call	_bus_readCPU
	pop	hl
	ld	de, 0
	ld	e, a
	ld	c, 8
	push	de
	pop	hl
	call	__ishl
	ld	(ix - 3), bc
	ld	bc, -137
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	hl, (ix)
	pop	ix
	ld	e, l
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	de
	ld	bc, (ix - 3)
	call	_bus_readCPU
	ld	bc, -161
	lea	hl, ix
	add	hl, bc
	ld	de, (hl)
	ld	e, a
	pop	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	de, 0
	ld	hl, (ix + 12)
	ld	e, l
	ld	d, h
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	hl
	call	_bus_readCPU
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	ld	bc, -161
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, L_.str.14
BB12_21:
	push	hl
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
BB12_22:
	pop	hl
BB12_23:
	pop	hl
	pop	hl
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -137
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
BB12_24:
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_getInstructionString
	ld	bc, -146
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	a, (_reg_accumulator)
	ld	l, a
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (_reg_status)
	ld	l, a
	push	ix
	ld	bc, -164
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (_reg_x)
	ld	l, a
	push	ix
	ld	bc, -167
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (_reg_y)
	ld	l, a
	push	ix
	ld	bc, -170
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	a, (_stackPointer)
	ld	l, a
	push	ix
	ld	bc, -173
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	iy, (_cycles)
	ld	a, (_cycles+3)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, 0
	push	bc
	push	hl
	push	hl
	push	bc
	push	hl
	push	hl
	push	bc
	push	de
	push	iy
	ld	de, -173
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -170
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -167
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -164
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -161
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	push	bc
	ld	bc, -143
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -149
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -158
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -152
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -146
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -137
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -155
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_exc_trace
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI12_0:
	private	LJTI12_0
LJTI12_0:
	dl	BB12_3
	dl	BB12_3
	dl	BB12_4
	dl	BB12_5
	dl	BB12_11
	dl	BB12_12
	dl	BB12_13
	dl	BB12_14
	dl	BB12_15
	dl	BB12_16
	dl	BB12_18
	dl	BB12_19
	dl	BB12_20

	section	.text,"ax",@progbits
	public	_cpu_getInstructionString
_cpu_getInstructionString:
	call	__frameset0
	ld	de, (ix + 6)
	ld	bc, 78
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nc, BB13_1
	ld	iy, L_switch.table.cpu_getInstructionString
	ld	bc, 3
	ex	de, hl
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	jq	BB13_3
BB13_1:
	ld	hl, L_.str.93
BB13_3:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_instruction
_cpu_instruction:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 9)
	push	hl
	call	_cpu_fetchAddress
	pop	de
	ld	a, (_generateTrace)
	ld	e, 1
	xor	a, e
	bit	0, a
	ld	(ix - 3), hl
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	z, _cpu_trace
	pop	hl
	pop	hl
	pop	hl
	ld	a, 55
	ld	bc, 78
	ld	hl, (ix + 6)
	or	a, a
	sbc	hl, bc
	jq	c, BB14_3
	ld	d, a
	jq	BB14_2
BB14_3:
	ld	bc, _reg_status
	ld	iy, LJTI14_0
	ld	de, (ix + 6)
	add	iy, de
	add	iy, de
	add	iy, de
	ld	hl, (iy)
	jp	(hl)
BB14_4:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_lda
	pop	hl
	ld	d, 0
	jq	BB14_2
BB14_5:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_ldx
	ld	d, 1
	jq	BB14_6
BB14_7:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_ldy
	ld	d, 2
	jq	BB14_6
BB14_8:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_sta
	ld	d, 3
	jq	BB14_6
BB14_9:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_stx
	ld	d, 4
	jq	BB14_6
BB14_10:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_sty
	ld	d, 5
	jq	BB14_6
BB14_11:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_adc
	ld	d, 6
	jq	BB14_6
BB14_12:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_sbc
	ld	d, 7
	jq	BB14_6
BB14_13:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_inc
	ld	d, 8
	jq	BB14_6
BB14_14:
	call	_cpu_inx
	ld	d, 9
	jq	BB14_2
BB14_15:
	call	_cpu_iny
	ld	d, 10
	jq	BB14_2
BB14_16:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_dec
	ld	d, 11
	jq	BB14_6
BB14_17:
	call	_cpu_dex
	ld	d, 12
	jq	BB14_2
BB14_18:
	call	_cpu_dey
	ld	d, 13
	jq	BB14_2
BB14_19:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_asl
	ld	d, 14
	jq	BB14_6
BB14_20:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_lsr
	ld	d, 15
	jq	BB14_6
BB14_21:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_rol
	ld	d, 16
	jq	BB14_6
BB14_22:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_ror
	ld	d, 17
	jq	BB14_6
BB14_23:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_and
	ld	d, 18
	jq	BB14_6
BB14_24:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_ora
	ld	d, 19
	jq	BB14_6
BB14_25:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_eor
	ld	d, 20
	jq	BB14_6
BB14_26:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_cmp
	ld	d, 21
	jq	BB14_6
BB14_27:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_cpx
	ld	d, 22
	jq	BB14_6
BB14_28:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_cpy
	ld	d, 23
	jq	BB14_6
BB14_29:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_bit
	ld	d, 24
	jq	BB14_6
BB14_30:
	call	_cpu_bcc
	ld	d, 25
	jq	BB14_2
BB14_31:
	call	_cpu_bcs
	ld	d, 26
	jq	BB14_2
BB14_32:
	call	_cpu_bne
	ld	d, 27
	jq	BB14_2
BB14_33:
	call	_cpu_beq
	ld	d, 28
	jq	BB14_2
BB14_34:
	call	_cpu_bpl
	ld	d, 29
	jq	BB14_2
BB14_35:
	call	_cpu_bmi
	ld	d, 30
	jq	BB14_2
BB14_36:
	call	_cpu_bvc
	ld	d, 31
	jq	BB14_2
BB14_37:
	call	_cpu_bvs
	ld	d, 32
	jq	BB14_2
BB14_38:
	call	_cpu_tax
	ld	d, 33
	jq	BB14_2
BB14_39:
	call	_cpu_txa
	ld	d, 34
	jq	BB14_2
BB14_40:
	call	_cpu_tay
	ld	d, 35
	jq	BB14_2
BB14_41:
	call	_cpu_tya
	ld	d, 36
	jq	BB14_2
BB14_42:
	call	_cpu_tsx
	ld	d, 37
	jq	BB14_2
BB14_43:
	ld	d, 38
	ld	a, (_reg_x)
	ld	(_stackPointer), a
	jq	BB14_84
BB14_44:
	call	_cpu_pla
	ld	d, 39
	jq	BB14_2
BB14_45:
	call	_cpu_pha
	ld	d, 40
	jq	BB14_2
BB14_46:
	call	_cpu_php
	ld	d, 41
	jq	BB14_2
BB14_47:
	call	_cpu_plp
	ld	d, 42
	jq	BB14_2
BB14_48:
	ld	hl, _reg_pc
	ld	bc, 2
	ld	de, (ix - 3)
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	d, 43
	jq	BB14_2
BB14_49:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_jsr
	ld	d, 44
	jq	BB14_6
BB14_50:
	call	_cpu_rts
	ld	d, 45
	jq	BB14_2
BB14_51:
	call	_cpu_rti
	ld	d, 46
	jq	BB14_2
BB14_52:
	ld	d, 47
	push	bc
	pop	hl
	res	0, (hl)
	jq	BB14_84
BB14_53:
	ld	d, 48
	push	bc
	pop	hl
	set	0, (hl)
	jq	BB14_84
BB14_54:
	ld	d, 49
	push	bc
	pop	hl
	res	3, (hl)
	jq	BB14_84
BB14_55:
	ld	d, 50
	push	bc
	pop	hl
	set	3, (hl)
	jq	BB14_84
BB14_56:
	ld	d, 51
	push	bc
	pop	hl
	res	2, (hl)
	jq	BB14_84
BB14_57:
	ld	d, 52
	push	bc
	pop	hl
	set	2, (hl)
	jq	BB14_84
BB14_58:
	ld	d, 53
	push	bc
	pop	hl
	res	6, (hl)
	jq	BB14_84
BB14_59:
	ld	d, 54
	jq	BB14_82
BB14_60:
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	ld	d, a
	jq	BB14_85
BB14_61:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_alr
	ld	d, 56
	jq	BB14_6
BB14_62:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_anc
	ld	d, 57
	jq	BB14_6
BB14_63:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_ane
	ld	d, 58
	jq	BB14_6
BB14_64:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_arr
	ld	d, 59
	jq	BB14_6
BB14_65:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_dcp
	ld	d, 60
	jq	BB14_6
BB14_66:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_isc
	ld	d, 61
	jq	BB14_6
BB14_67:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_las
	ld	d, 62
	jq	BB14_6
BB14_68:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_lax
	ld	d, 63
	jq	BB14_6
BB14_69:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_lxa
	ld	d, 64
	jq	BB14_6
BB14_70:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_rla
	ld	d, 65
	jq	BB14_6
BB14_71:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_rra
	ld	d, 66
	jq	BB14_6
BB14_72:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_sax
	ld	d, 67
	jq	BB14_6
BB14_73:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_sbx
	ld	d, 68
	jq	BB14_6
BB14_74:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_sha
	ld	d, 69
	jq	BB14_6
BB14_75:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_shx
	ld	d, 70
	jq	BB14_6
BB14_76:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_shy
	ld	d, 71
	jq	BB14_6
BB14_77:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_slo
	ld	d, 72
	jq	BB14_6
BB14_78:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_sre
	ld	d, 73
	jq	BB14_6
BB14_79:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_illegal_tas
	ld	d, 74
	jq	BB14_6
BB14_80:
	ld	hl, (ix - 3)
	push	hl
	call	_cpu_sbc
	ld	d, 75
BB14_6:
	pop	hl
BB14_2:
	ld	a, d
	pop	hl
	pop	ix
	ret
BB14_81:
	ld	d, 76
BB14_82:
	ld	a, (_reg_status)
	or	a, 20
	ld	(_reg_status), a
	jq	BB14_2
BB14_83:
	ld	d, 77
BB14_84:
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
BB14_85:
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	jq	BB14_2
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI14_0:
	private	LJTI14_0
LJTI14_0:
	dl	BB14_4
	dl	BB14_5
	dl	BB14_7
	dl	BB14_8
	dl	BB14_9
	dl	BB14_10
	dl	BB14_11
	dl	BB14_12
	dl	BB14_13
	dl	BB14_14
	dl	BB14_15
	dl	BB14_16
	dl	BB14_17
	dl	BB14_18
	dl	BB14_19
	dl	BB14_20
	dl	BB14_21
	dl	BB14_22
	dl	BB14_23
	dl	BB14_24
	dl	BB14_25
	dl	BB14_26
	dl	BB14_27
	dl	BB14_28
	dl	BB14_29
	dl	BB14_30
	dl	BB14_31
	dl	BB14_32
	dl	BB14_33
	dl	BB14_34
	dl	BB14_35
	dl	BB14_36
	dl	BB14_37
	dl	BB14_38
	dl	BB14_39
	dl	BB14_40
	dl	BB14_41
	dl	BB14_42
	dl	BB14_43
	dl	BB14_44
	dl	BB14_45
	dl	BB14_46
	dl	BB14_47
	dl	BB14_48
	dl	BB14_49
	dl	BB14_50
	dl	BB14_51
	dl	BB14_52
	dl	BB14_53
	dl	BB14_54
	dl	BB14_55
	dl	BB14_56
	dl	BB14_57
	dl	BB14_58
	dl	BB14_59
	dl	BB14_60
	dl	BB14_61
	dl	BB14_62
	dl	BB14_63
	dl	BB14_64
	dl	BB14_65
	dl	BB14_66
	dl	BB14_67
	dl	BB14_68
	dl	BB14_69
	dl	BB14_70
	dl	BB14_71
	dl	BB14_72
	dl	BB14_73
	dl	BB14_74
	dl	BB14_75
	dl	BB14_76
	dl	BB14_77
	dl	BB14_78
	dl	BB14_79
	dl	BB14_80
	dl	BB14_81
	dl	BB14_83

	section	.text,"ax",@progbits
	public	_cpu_lda
_cpu_lda:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	d, a
	pop	hl
	ld	(_reg_accumulator), a
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iyl, 0
	ld	bc, 1
	ld	a, iyl
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, d
	or	a, a
	jq	z, BB15_1
	ld	e, iyl
	jq	BB15_3
BB15_1:
	ld	e, 2
BB15_3:
	ld	a, d
	and	a, -128
	ld	c, a
	ld	a, e
	add	a, c
	add	a, l
	ld	(_reg_status), a
	ld	a, iyl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_ldx
_cpu_ldx:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	l, a
	pop	de
	ld	(_reg_x), a
	ld	a, (_reg_status)
	and	a, 125
	ld	e, a
	ld	a, l
	or	a, a
	jq	z, BB16_1
	ld	c, 0
	jq	BB16_3
BB16_1:
	ld	c, 2
BB16_3:
	ld	a, l
	and	a, -128
	ld	l, a
	ld	a, c
	add	a, l
	add	a, e
	ld	(_reg_status), a
	ld	a, 1
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_ldy
_cpu_ldy:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	h, 2
	ld	l, a
	pop	de
	ld	(_reg_y), a
	ld	a, (_reg_status)
	and	a, 125
	ld	e, a
	ld	a, l
	or	a, a
	ld	c, h
	jq	z, BB17_2
	ld	c, 0
BB17_2:
	ld	a, l
	and	a, -128
	ld	l, a
	ld	a, c
	add	a, l
	add	a, e
	ld	(_reg_status), a
	ld	a, h
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_sta
_cpu_sta:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	a, (_reg_accumulator)
	ld	e, a
	push	de
	push	hl
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 3
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_stx
_cpu_stx:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	a, (_reg_x)
	ld	e, a
	push	de
	push	hl
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 4
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_sty
_cpu_sty:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	a, (_reg_y)
	ld	e, a
	push	de
	push	hl
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 5
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_adc
_cpu_adc:
	ld	hl, -6
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	(ix - 3), a
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_accumulator)
	ld	de, 0
	push	de
	pop	iy
	ld	iyl, a
	push	de
	pop	bc
	ld	c, (ix - 3)
	ld	(ix - 6), iy
	ld	(ix - 3), bc
	add	iy, bc
	ld	a, (_reg_status)
	ld	c, a
	and	a, 1
	ld	e, a
	add	iy, de
	ld	de, 256
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jq	nc, BB21_1
	ld	l, 0
	jq	BB21_3
BB21_1:
	ld	l, 1
BB21_3:
	ld	d, 6
	ld	a, c
	and	a, 60
	ld	c, a
	ld	a, l
	and	a, 1
	ld	l, a
	ld	a, c
	add	a, l
	ld	e, a
	lea	hl, iy
	ld	bc, (ix - 6)
	call	__ixor
	ld	(ix - 6), hl
	lea	hl, iy
	ld	bc, (ix - 3)
	call	__ixor
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	call	__iand
	ld	c, 1
	call	__ishru
	ld	a, l
	and	a, 64
	ld	l, a
	ld	a, e
	add	a, l
	ld	l, a
	ld	a, iyl
	ld	(_reg_accumulator), a
	or	a, a
	jq	z, BB21_4
	ld	c, 0
	jq	BB21_6
BB21_4:
	ld	c, 2
BB21_6:
	ld	a, iyl
	and	a, -128
	ld	e, a
	ld	a, c
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, d
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_sbc
_cpu_sbc:
	ld	hl, -6
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	pop	hl
	cpl
	ld	(ix - 3), a
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_accumulator)
	ld	de, 0
	push	de
	pop	iy
	ld	iyl, a
	push	de
	pop	bc
	ld	c, (ix - 3)
	ld	(ix - 6), iy
	ld	(ix - 3), bc
	add	iy, bc
	ld	a, (_reg_status)
	ld	c, a
	and	a, 1
	ld	e, a
	add	iy, de
	ld	de, 256
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jq	nc, BB22_1
	ld	l, 0
	jq	BB22_3
BB22_1:
	ld	l, 1
BB22_3:
	ld	d, 7
	ld	a, c
	and	a, 60
	ld	c, a
	ld	a, l
	and	a, 1
	ld	l, a
	ld	a, c
	add	a, l
	ld	e, a
	lea	hl, iy
	ld	bc, (ix - 6)
	call	__ixor
	ld	(ix - 6), hl
	lea	hl, iy
	ld	bc, (ix - 3)
	call	__ixor
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	call	__iand
	ld	c, 1
	call	__ishru
	ld	a, l
	and	a, 64
	ld	l, a
	ld	a, e
	add	a, l
	ld	l, a
	ld	a, iyl
	ld	(_reg_accumulator), a
	or	a, a
	jq	z, BB22_4
	ld	c, 0
	jq	BB22_6
BB22_4:
	ld	c, 2
BB22_6:
	ld	a, iyl
	and	a, -128
	ld	e, a
	ld	a, c
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, d
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_inc
_cpu_inc:
	ld	hl, -4
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	pop	hl
	ld	(ix - 4), a
	add	a, 1
	ld	l, a
	ld	(ix - 3), hl
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 2
	ld	d, 0
	ld	a, d
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, (ix - 4)
	add	a, 1
	jq	nc, BB23_2
	ld	d, 2
BB23_2:
	ld	bc, (ix - 3)
	ld	a, c
	and	a, -128
	ld	e, a
	ld	a, d
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 8
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_dec
_cpu_dec:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	e, a
	pop	hl
	dec	e
	ld	(ix - 3), de
	push	de
	ld	hl, (ix + 6)
	push	hl
	call	_bus_writeCPU
	ld	d, 0
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	ld	a, d
	call	__ladd
	ld	bc, (ix - 3)
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, c
	or	a, a
	jq	nz, BB24_2
	ld	d, 2
BB24_2:
	ld	a, c
	and	a, -128
	ld	e, a
	ld	a, d
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 11
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_asl
_cpu_asl:
	ld	hl, -4
	call	__frameset
	ld	iy, _cycles
	ld	l, 0
	ld	a, (_reg_accumulator)
	ld	d, a
	ld	a, (_accumulatorAddrMode)
	ld	e, 1
	xor	a, e
	xor	a, e
	bit	0, a
	jq	nz, BB25_2
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	iy, _cycles
	ld	d, a
	pop	hl
	ld	a, (_accumulatorAddrMode)
	ld	l, 1
	xor	a, l
	ld	l, a
BB25_2:
	ld	(ix - 1), l
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	(ix - 4), iy
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 124
	ld	l, a
	ld	a, d
	ld	b, 7
	call	__bshru
	ld	e, a
	sla	d
	jq	z, BB25_3
	ld	c, 0
	jq	BB25_5
BB25_3:
	ld	c, 2
BB25_5:
	ld	h, 14
	ld	a, d
	and	a, -128
	add	a, e
	add	a, c
	add	a, l
	ld	(_reg_status), a
	bit	0, (ix - 1)
	jq	z, BB25_6
	ld	l, d
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_bus_writeCPU
	ld	iyl, 0
	ld	a, iyl
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, (ix - 4)
	ld	e, (iy)
	ld	bc, 1
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	h, 14
	ld	(_cycles+3), a
	jq	BB25_8
BB25_6:
	ld	a, d
	ld	(_reg_accumulator), a
BB25_8:
	xor	a, a
	ld	(_accumulatorAddrMode), a
	ld	a, h
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_lsr
_cpu_lsr:
	ld	hl, -4
	call	__frameset
	ld	iy, _cycles
	ld	l, 0
	ld	a, (_reg_accumulator)
	ld	d, a
	ld	a, (_accumulatorAddrMode)
	ld	e, 1
	xor	a, e
	xor	a, e
	bit	0, a
	jq	nz, BB26_2
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	iy, _cycles
	ld	d, a
	pop	hl
	ld	a, (_accumulatorAddrMode)
	ld	l, 1
	xor	a, l
	ld	l, a
BB26_2:
	ld	(ix - 1), l
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	(ix - 4), iy
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	and	a, 1
	ld	e, a
	ld	a, (_reg_status)
	and	a, 124
	ld	c, a
	ld	l, d
	srl	l
	ld	a, d
	cp	a, 2
	jq	c, BB26_3
	xor	a, a
	jq	BB26_5
BB26_3:
	ld	a, 2
BB26_5:
	ld	h, 15
	add	a, e
	add	a, c
	ld	(_reg_status), a
	bit	0, (ix - 1)
	jq	z, BB26_6
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_bus_writeCPU
	ld	iyl, 0
	ld	a, iyl
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, (ix - 4)
	ld	e, (iy)
	ld	bc, 1
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	h, 15
	ld	(_cycles+3), a
	jq	BB26_8
BB26_6:
	ld	a, l
	ld	(_reg_accumulator), a
BB26_8:
	xor	a, a
	ld	(_accumulatorAddrMode), a
	ld	a, h
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_rol
_cpu_rol:
	ld	hl, -4
	call	__frameset
	ld	iy, _cycles
	ld	l, 0
	ld	a, (_reg_accumulator)
	ld	d, a
	ld	a, (_accumulatorAddrMode)
	ld	e, 1
	xor	a, e
	xor	a, e
	bit	0, a
	jq	nz, BB27_2
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	iy, _cycles
	ld	d, a
	pop	hl
	ld	a, (_accumulatorAddrMode)
	ld	l, 1
	xor	a, l
	ld	l, a
BB27_2:
	ld	(ix - 1), l
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	(ix - 4), iy
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	ld	l, a
	and	a, 1
	ld	c, a
	ld	a, l
	and	a, 124
	ld	l, a
	ld	a, d
	ld	b, 7
	call	__bshru
	ld	e, a
	sla	d
	ld	a, c
	add	a, d
	ld	c, a
	or	a, a
	jq	z, BB27_3
	ld	h, 0
	jq	BB27_5
BB27_3:
	ld	h, 2
BB27_5:
	ld	iyl, 16
	ld	a, d
	and	a, -128
	add	a, e
	add	a, l
	add	a, h
	ld	(_reg_status), a
	bit	0, (ix - 1)
	jq	z, BB27_6
	push	bc
	ld	hl, (ix + 6)
	push	hl
	call	_bus_writeCPU
	ld	iyl, 0
	ld	a, iyl
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, (ix - 4)
	ld	e, (iy)
	ld	iyl, 16
	ld	bc, 1
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	jq	BB27_8
BB27_6:
	ld	a, c
	ld	(_reg_accumulator), a
BB27_8:
	xor	a, a
	ld	(_accumulatorAddrMode), a
	ld	a, iyl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_ror
_cpu_ror:
	ld	hl, -4
	call	__frameset
	ld	iy, _cycles
	ld	l, 0
	ld	a, (_reg_accumulator)
	ld	d, a
	ld	a, (_accumulatorAddrMode)
	ld	e, 1
	xor	a, e
	xor	a, e
	bit	0, a
	jq	nz, BB28_2
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	iy, _cycles
	ld	d, a
	pop	hl
	ld	a, (_accumulatorAddrMode)
	ld	l, 1
	xor	a, l
	ld	l, a
BB28_2:
	ld	(ix - 1), l
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	(ix - 4), iy
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	ld	l, a
	ld	a, d
	and	a, 1
	ld	e, a
	ld	a, l
	and	a, 124
	add	a, e
	ld	e, a
	ld	a, l
	rrc	a
	rr	d
	jq	z, BB28_3
	ld	c, 0
	jq	BB28_5
BB28_3:
	ld	c, 2
BB28_5:
	ld	h, 17
	ld	a, l
	ld	b, 7
	call	__bshl
	ld	l, a
	ld	a, e
	add	a, l
	add	a, c
	ld	(_reg_status), a
	bit	0, (ix - 1)
	jq	z, BB28_6
	ld	l, d
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_bus_writeCPU
	ld	iyh, 0
	ld	a, iyh
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, (ix - 4)
	ld	e, (iy)
	ld	bc, 1
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	h, 17
	ld	(_cycles+3), a
	jq	BB28_8
BB28_6:
	ld	a, d
	ld	(_reg_accumulator), a
BB28_8:
	xor	a, a
	ld	(_accumulatorAddrMode), a
	ld	a, h
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_and
_cpu_and:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	l, a
	pop	de
	ld	a, (_reg_accumulator)
	and	a, l
	ld	d, a
	ld	(_reg_accumulator), a
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iyl, 0
	ld	bc, 1
	ld	a, iyl
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, d
	or	a, a
	jq	nz, BB29_2
	ld	iyl, 2
BB29_2:
	ld	a, d
	and	a, -128
	ld	e, a
	ld	a, iyl
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 18
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_ora
_cpu_ora:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	l, a
	pop	de
	ld	a, (_reg_accumulator)
	or	a, l
	ld	d, a
	ld	(_reg_accumulator), a
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iyl, 0
	ld	bc, 1
	ld	a, iyl
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, d
	or	a, a
	jq	nz, BB30_2
	ld	iyl, 2
BB30_2:
	ld	a, d
	and	a, -128
	ld	e, a
	ld	a, iyl
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 19
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_eor
_cpu_eor:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	l, a
	pop	de
	ld	a, (_reg_accumulator)
	xor	a, l
	ld	d, a
	ld	(_reg_accumulator), a
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iyl, 0
	ld	bc, 1
	ld	a, iyl
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, d
	or	a, a
	jq	nz, BB31_2
	ld	iyl, 2
BB31_2:
	ld	a, d
	and	a, -128
	ld	e, a
	ld	a, iyl
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 20
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_cmp
_cpu_cmp:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	d, a
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_accumulator)
	ld	l, a
	cp	a, d
	jq	nc, BB32_3
	ld	a, (_reg_status)
	and	a, -4
	jq	BB32_2
BB32_3:
	ld	a, l
	cp	a, d
	jq	nz, BB32_5
	ld	a, (_reg_status)
	or	a, 3
BB32_2:
	ld	e, a
BB32_7:
	ld	a, l
	sub	a, d
	ld	l, a
	ld	a, e
	and	a, 127
	ld	e, a
	ld	a, l
	and	a, -128
	ld	l, a
	ld	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 21
	pop	ix
	ret
BB32_5:
	ld	a, (_reg_status)
	ld	e, a
	ld	a, d
	cp	a, l
	jq	nc, BB32_7
	ld	a, e
	and	a, -4
	ld	e, a
	inc	e
	jq	BB32_7
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_cpx
_cpu_cpx:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	d, a
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_x)
	ld	l, a
	cp	a, d
	jq	nc, BB33_3
	ld	a, (_reg_status)
	and	a, -4
	jq	BB33_2
BB33_3:
	ld	a, l
	cp	a, d
	jq	nz, BB33_5
	ld	a, (_reg_status)
	or	a, 3
BB33_2:
	ld	e, a
BB33_7:
	ld	a, l
	sub	a, d
	ld	l, a
	ld	a, e
	and	a, 127
	ld	e, a
	ld	a, l
	and	a, -128
	ld	l, a
	ld	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 22
	pop	ix
	ret
BB33_5:
	ld	a, (_reg_status)
	ld	e, a
	ld	a, d
	cp	a, l
	jq	nc, BB33_7
	ld	a, e
	and	a, -4
	ld	e, a
	inc	e
	jq	BB33_7
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_cpy
_cpu_cpy:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	d, a
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_y)
	ld	l, a
	cp	a, d
	jq	nc, BB34_3
	ld	a, (_reg_status)
	and	a, -4
	jq	BB34_2
BB34_3:
	ld	a, l
	cp	a, d
	jq	nz, BB34_5
	ld	a, (_reg_status)
	or	a, 3
BB34_2:
	ld	e, a
BB34_7:
	ld	a, l
	sub	a, d
	ld	l, a
	ld	a, e
	and	a, 127
	ld	e, a
	ld	a, l
	and	a, -128
	ld	l, a
	ld	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 23
	pop	ix
	ret
BB34_5:
	ld	a, (_reg_status)
	ld	e, a
	ld	a, d
	cp	a, l
	jq	nc, BB34_7
	ld	a, e
	and	a, -4
	ld	e, a
	inc	e
	jq	BB34_7
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_bit
_cpu_bit:
	ld	hl, -1
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	(ix - 1), a
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	d, 0
	ld	bc, 1
	ld	a, d
	call	__ladd
	ld	c, (ix - 1)
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_accumulator)
	and	a, c
	ld	e, a
	ld	a, (_reg_status)
	and	a, 61
	ld	l, a
	ld	a, e
	or	a, a
	jq	nz, BB35_2
	ld	d, 2
BB35_2:
	ld	a, c
	and	a, -64
	add	a, l
	add	a, d
	ld	(_reg_status), a
	ld	a, 24
	inc	sp
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_jmp
_cpu_jmp:
	call	__frameset0
	ld	de, (ix + 6)
	ld	hl, _reg_pc
	ld	iy, _cycles
	ld	bc, 2
	xor	a, a
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 43
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_jsr
_cpu_jsr:
	call	__frameset0
	ld	de, (ix + 6)
	ld	hl, _reg_pc
	ld	bc, (hl)
	dec.sis	bc
	ld	(hl), e
	inc	hl
	ld	(hl), d
	push	bc
	call	_cpu_stackPush16
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 2
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 44
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_alr
_cpu_illegal_alr:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_and
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_lsr
	pop	hl
	ld	a, 56
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_anc
_cpu_illegal_anc:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_and
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	l, a
	pop	de
	ld	a, (_reg_status)
	and	a, -2
	ld	e, a
	ld	a, l
	ld	b, 7
	call	__bshru
	ld	l, a
	ld	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 57
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_ane
_cpu_illegal_ane:
	ld	hl, -1
	call	__frameset
	ld	a, (_reg_x)
	ld	(ix - 1), a
	call	_rand
	ld	a, (ix - 1)
	and	a, l
	ld	(_reg_accumulator), a
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_and
	pop	hl
	ld	a, 58
	inc	sp
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_arr
_cpu_illegal_arr:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_and
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_ror
	pop	hl
	ld	a, 59
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_dcp
_cpu_illegal_dcp:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_dec
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_cmp
	pop	hl
	ld	a, 60
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_isc
_cpu_illegal_isc:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_inc
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_sbc
	pop	hl
	ld	a, 61
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_las
_cpu_illegal_las:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_lda
	pop	hl
	call	_cpu_tsx
	ld	a, 62
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_lax
_cpu_illegal_lax:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_lda
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_ldx
	pop	hl
	ld	a, 63
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_lxa
_cpu_illegal_lxa:
	ld	hl, -3
	call	__frameset
	call	_rand
	ld	(ix - 3), hl
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	pop	hl
	ld	hl, (ix - 3)
	and	a, l
	ld	(_reg_accumulator), a
	ld	(_reg_x), a
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 64
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_rla
_cpu_illegal_rla:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_rol
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_and
	pop	hl
	ld	a, 65
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_rra
_cpu_illegal_rra:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_ror
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_adc
	pop	hl
	ld	a, 66
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_sax
_cpu_illegal_sax:
	call	__frameset0
	ld	de, (ix + 6)
	ld	a, (_reg_accumulator)
	ld	l, a
	ld	a, (_reg_x)
	and	a, l
	ld	l, a
	push	hl
	push	de
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 67
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_sbx
_cpu_illegal_sbx:
	ld	hl, -1
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_bus_readCPU
	ld	(ix - 1), a
	pop	hl
	ld	a, (_reg_accumulator)
	ld	l, a
	ld	a, (_reg_x)
	and	a, l
	ld	d, a
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	e, (ix - 1)
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	cp	a, e
	jq	nc, BB50_3
	ld	a, (_reg_status)
	and	a, -4
	jq	BB50_2
BB50_3:
	ld	a, d
	cp	a, e
	jq	nz, BB50_5
	ld	a, (_reg_status)
	or	a, 3
BB50_2:
	ld	l, a
BB50_7:
	ld	a, d
	sub	a, e
	ld	e, a
	ld	a, l
	and	a, 127
	ld	l, a
	ld	a, e
	and	a, -128
	ld	e, a
	ld	a, l
	add	a, e
	ld	(_reg_status), a
	ld	a, 68
	inc	sp
	pop	ix
	ret
BB50_5:
	ld	a, (_reg_status)
	ld	l, a
	ld	a, e
	cp	a, d
	jq	nc, BB50_7
	ld	a, l
	and	a, -4
	ld	l, a
	inc	l
	jq	BB50_7
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_sha
_cpu_illegal_sha:
	ld	hl, -2
	call	__frameset
	call	_rand
	ld	a, l
	and	a, 3
	ld	l, a
	ld	a, (_reg_accumulator)
	ld	c, a
	ld	a, (_reg_x)
	ld	e, a
	ld	a, l
	or	a, a
	jq	nz, BB51_2
	ld	a, e
	and	a, c
	jq	BB51_3
BB51_2:
	ld	hl, (ix + 6)
	push	hl
	ld	(ix - 1), e
	ld	(ix - 2), c
	call	_bus_readCPU
	pop	hl
	ld	a, (ix - 2)
	and	a, 1
	ld	l, (ix - 1)
	and	a, l
BB51_3:
	ld	l, a
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 69
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_shx
_cpu_illegal_shx:
	ld	hl, -3
	call	__frameset
	call	_rand
	ld	a, l
	and	a, 3
	ld	l, a
	ld	a, (_reg_x)
	ld	e, a
	ld	a, l
	or	a, a
	jq	z, BB52_2
	ld	hl, (ix + 6)
	push	hl
	ld	(ix - 3), de
	call	_bus_readCPU
	pop	hl
	ld	hl, (ix - 3)
	ld	a, l
	and	a, 1
	ld	e, a
BB52_2:
	push	de
	ld	hl, (ix + 6)
	push	hl
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 70
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_shy
_cpu_illegal_shy:
	ld	hl, -3
	call	__frameset
	call	_rand
	ld	a, l
	and	a, 3
	ld	l, a
	ld	a, (_reg_y)
	ld	e, a
	ld	a, l
	or	a, a
	jq	z, BB53_2
	ld	hl, (ix + 6)
	push	hl
	ld	(ix - 3), de
	call	_bus_readCPU
	pop	hl
	ld	hl, (ix - 3)
	ld	a, l
	and	a, 1
	ld	e, a
BB53_2:
	push	de
	ld	hl, (ix + 6)
	push	hl
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 71
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_slo
_cpu_illegal_slo:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_asl
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_ora
	pop	hl
	ld	a, 72
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_sre
_cpu_illegal_sre:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_lsr
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_eor
	pop	hl
	ld	a, 73
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_tas
_cpu_illegal_tas:
	ld	hl, -2
	call	__frameset
	ld	a, (_reg_accumulator)
	ld	l, a
	ld	a, (_reg_x)
	and	a, l
	ld	(_stackPointer), a
	call	_rand
	ld	a, l
	and	a, 3
	ld	l, a
	ld	a, (_reg_accumulator)
	ld	c, a
	ld	a, (_reg_x)
	ld	e, a
	ld	a, l
	or	a, a
	jq	nz, BB56_2
	ld	a, e
	and	a, c
	jq	BB56_3
BB56_2:
	ld	hl, (ix + 6)
	push	hl
	ld	(ix - 1), e
	ld	(ix - 2), c
	call	_bus_readCPU
	pop	hl
	ld	a, (ix - 2)
	and	a, 1
	ld	l, (ix - 1)
	and	a, l
BB56_3:
	ld	l, a
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_bus_writeCPU
	pop	hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 74
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_sbc
_cpu_illegal_sbc:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	_cpu_sbc
	pop	hl
	ld	a, 75
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_nop
_cpu_illegal_nop:
	call	__frameset0
	ld	iy, _cycles
	ld	bc, 1
	xor	a, a
	ld	d, 77
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_execute
_cpu_execute:
	ld	hl, _reg_pc
	ld	hl, (hl)
	push	hl
	call	_bus_readCPU
	ld	d, a
	pop	hl
	ld	iy, _reg_pc
	ld	hl, (iy)
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iy, 0
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	sub	a, -128
	lea	de, iy
	ld	e, a
	ld	hl, LJTI59_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	jp	(hl)
BB59_261:
	ld	hl, 2
	jq	BB59_262
BB59_28:
	ld	hl, 11
	jq	BB59_25
BB59_234:
	ld	hl, 11
	jq	BB59_231
BB59_37:
	ld	hl, 4
	jq	BB59_36
BB59_27:
	ld	hl, 4
	jq	BB59_25
BB59_33:
	ld	hl, 4
	jq	BB59_20
BB59_230:
	ld	hl, 4
	jq	BB59_231
BB59_70:
	ld	hl, 13
	jq	BB59_158
BB59_145:
	ld	hl, 2
	jq	BB59_144
BB59_159:
	ld	hl, 34
	jq	BB59_158
BB59_186:
	ld	hl, 58
	jq	BB59_184
BB59_35:
	ld	hl, 3
	jq	BB59_36
BB59_23:
	ld	hl, 3
	jq	BB59_20
BB59_31:
	ld	hl, 3
	jq	BB59_32
BB59_233:
	ld	hl, 3
	jq	BB59_231
BB59_147:
	ld	hl, 25
	jq	BB59_148
BB59_30:
	ld	hl, 12
	jq	BB59_25
BB59_238:
	ld	hl, 12
	jq	BB59_237
BB59_38:
	ld	hl, 9
BB59_36:
	push	hl
	ld	hl, 5
	jq	BB59_268
BB59_29:
	ld	hl, 9
	jq	BB59_25
BB59_34:
	ld	hl, 10
BB59_32:
	push	hl
	ld	hl, 4
	jq	BB59_268
BB59_232:
	ld	hl, 10
BB59_231:
	push	hl
	ld	hl, 67
	jq	BB59_268
BB59_161:
	ld	hl, 36
	jq	BB59_158
BB59_26:
	ld	hl, 8
	jq	BB59_25
BB59_163:
	ld	hl, 38
	jq	BB59_158
BB59_257:
	ld	hl, 74
	jq	BB59_205
BB59_240:
	ld	hl, 71
	jq	BB59_205
BB59_24:
	ld	hl, 7
BB59_25:
	push	hl
	ld	hl, 3
	jq	BB59_268
BB59_239:
	ld	hl, 70
	jq	BB59_205
BB59_236:
	ld	hl, 8
BB59_237:
	push	hl
	ld	hl, 69
	jq	BB59_268
BB59_19:
	ld	hl, 2
	jq	BB59_20
BB59_7:
	ld	hl, 11
	jq	BB59_2
BB59_13:
	ld	hl, 2
	jq	BB59_11
BB59_211:
	ld	hl, 11
	jq	BB59_207
BB59_21:
	ld	hl, 4
	jq	BB59_17
BB59_6:
	ld	hl, 4
	jq	BB59_2
BB59_14:
	ld	hl, 4
	jq	BB59_11
BB59_206:
	ld	hl, 4
	jq	BB59_207
BB59_160:
	ld	hl, 35
	jq	BB59_158
BB59_5:
	ld	hl, 2
	jq	BB59_2
BB59_157:
	ld	hl, 33
	jq	BB59_158
BB59_213:
	ld	hl, 64
	jq	BB59_184
BB59_16:
	ld	hl, 3
	jq	BB59_17
BB59_1:
	ld	hl, 3
	jq	BB59_2
BB59_10:
	ld	hl, 3
	jq	BB59_11
BB59_209:
	ld	hl, 3
	jq	BB59_207
BB59_150:
	ld	hl, 26
	jq	BB59_148
BB59_9:
	ld	hl, 12
	jq	BB59_2
BB59_212:
	ld	hl, 12
	jq	BB59_207
BB59_22:
	ld	hl, 9
	jq	BB59_17
BB59_8:
	ld	hl, 9
	jq	BB59_2
BB59_15:
	ld	hl, 10
	jq	BB59_11
BB59_208:
	ld	hl, 10
	jq	BB59_207
BB59_180:
	ld	hl, 53
	jq	BB59_158
BB59_4:
	ld	hl, 8
	jq	BB59_2
BB59_162:
	ld	hl, 37
	jq	BB59_158
BB59_204:
	ld	hl, 62
BB59_205:
	ld	de, 8
	jq	BB59_149
BB59_18:
	ld	hl, 7
BB59_17:
	push	hl
	ld	hl, 2
	jq	BB59_268
BB59_3:
	ld	hl, 7
BB59_2:
	push	hl
	push	iy
	jq	BB59_269
BB59_12:
	ld	hl, 8
BB59_11:
	push	hl
	push	bc
	jq	BB59_269
BB59_210:
	ld	hl, 8
BB59_207:
	push	hl
	ld	hl, 63
	jq	BB59_268
BB59_141:
	ld	hl, 2
	jq	BB59_140
BB59_132:
	ld	hl, 11
	jq	BB59_127
BB59_194:
	ld	hl, 11
	jq	BB59_189
BB59_142:
	ld	hl, 4
	jq	BB59_140
BB59_131:
	ld	hl, 4
	jq	BB59_127
BB59_67:
	ld	hl, 4
	jq	BB59_65
BB59_188:
	ld	hl, 4
	jq	BB59_189
BB59_63:
	push	bc
	ld	hl, 10
	jq	BB59_268
BB59_130:
	ld	hl, 2
	jq	BB59_127
BB59_69:
	push	bc
	ld	hl, 12
	jq	BB59_268
BB59_235:
	ld	hl, 68
	jq	BB59_184
BB59_139:
	ld	hl, 3
BB59_140:
	push	hl
	ld	hl, 23
	jq	BB59_268
BB59_126:
	ld	hl, 3
	jq	BB59_127
BB59_64:
	ld	hl, 3
	jq	BB59_65
BB59_191:
	ld	hl, 3
	jq	BB59_189
BB59_151:
	ld	hl, 27
	jq	BB59_148
BB59_134:
	ld	hl, 12
	jq	BB59_127
BB59_195:
	ld	hl, 12
	jq	BB59_189
BB59_133:
	ld	hl, 9
	jq	BB59_127
BB59_68:
	ld	hl, 9
	jq	BB59_65
BB59_190:
	ld	hl, 9
	jq	BB59_189
BB59_176:
	ld	hl, 49
	jq	BB59_158
BB59_129:
	ld	hl, 8
	jq	BB59_127
BB59_193:
	ld	hl, 8
	jq	BB59_189
BB59_128:
	ld	hl, 7
BB59_127:
	push	hl
	ld	hl, 21
	jq	BB59_268
BB59_66:
	ld	hl, 7
BB59_65:
	push	hl
	ld	hl, 11
	jq	BB59_268
BB59_192:
	ld	hl, 7
BB59_189:
	push	hl
	ld	hl, 60
	jq	BB59_268
BB59_137:
	ld	hl, 2
	jq	BB59_136
BB59_54:
	ld	hl, 11
	jq	BB59_49
BB59_202:
	ld	hl, 11
	jq	BB59_197
BB59_138:
	ld	hl, 4
	jq	BB59_136
BB59_53:
	ld	hl, 4
	jq	BB59_49
BB59_60:
	ld	hl, 4
	jq	BB59_58
BB59_196:
	ld	hl, 4
	jq	BB59_197
BB59_62:
	push	bc
	ld	hl, 9
	jq	BB59_268
BB59_52:
	ld	hl, 2
	jq	BB59_49
BB59_182:
	ld	hl, 55
	jq	BB59_158
BB59_258:
	ld	hl, 75
	jq	BB59_184
BB59_135:
	ld	hl, 3
BB59_136:
	push	hl
	ld	hl, 22
	jq	BB59_268
BB59_48:
	ld	hl, 3
	jq	BB59_49
BB59_57:
	ld	hl, 3
	jq	BB59_58
BB59_199:
	ld	hl, 3
	jq	BB59_197
BB59_152:
	ld	hl, 28
	jq	BB59_148
BB59_56:
	ld	hl, 12
	jq	BB59_49
BB59_267:
	push	bc
	ld	hl, 76
	jq	BB59_268
BB59_203:
	ld	hl, 12
	jq	BB59_197
BB59_55:
	ld	hl, 9
	jq	BB59_49
BB59_61:
	ld	hl, 9
	jq	BB59_58
BB59_198:
	ld	hl, 9
	jq	BB59_197
BB59_177:
	ld	hl, 50
	jq	BB59_158
BB59_51:
	ld	hl, 8
BB59_49:
	push	hl
	ld	hl, 7
	jq	BB59_268
BB59_201:
	ld	hl, 8
	jq	BB59_197
BB59_50:
	ld	hl, 7
BB59_20:
	push	hl
	jq	BB59_268
BB59_59:
	ld	hl, 7
BB59_58:
	push	hl
	ld	hl, 8
	jq	BB59_268
BB59_200:
	ld	hl, 7
BB59_197:
	push	hl
	ld	hl, 61
	jq	BB59_268
BB59_181:
	ld	hl, 54
	jq	BB59_158
BB59_114:
	ld	hl, 11
	jq	BB59_109
BB59_247:
	ld	hl, 11
	jq	BB59_242
BB59_263:
	ld	hl, 4
	jq	BB59_262
BB59_113:
	ld	hl, 4
	jq	BB59_109
BB59_76:
	ld	hl, 4
	jq	BB59_72
BB59_241:
	ld	hl, 4
	jq	BB59_242
BB59_166:
	ld	hl, 41
	jq	BB59_158
BB59_112:
	ld	hl, 2
	jq	BB59_109
BB59_75:
	push	iy
	jq	BB59_73
BB59_265:
	ld	hl, 3
	jq	BB59_262
BB59_108:
	ld	hl, 3
	jq	BB59_109
BB59_71:
	ld	hl, 3
	jq	BB59_72
BB59_244:
	ld	hl, 3
	jq	BB59_242
BB59_153:
	ld	hl, 29
	jq	BB59_148
BB59_116:
	ld	hl, 12
	jq	BB59_109
BB59_248:
	ld	hl, 12
	jq	BB59_242
BB59_264:
	ld	hl, 9
	jq	BB59_262
BB59_115:
	ld	hl, 9
	jq	BB59_109
BB59_77:
	ld	hl, 9
	jq	BB59_72
BB59_243:
	ld	hl, 9
	jq	BB59_242
BB59_174:
	ld	hl, 47
	jq	BB59_158
BB59_111:
	ld	hl, 8
	jq	BB59_109
BB59_259:
	push	bc
	jq	BB59_260
BB59_246:
	ld	hl, 8
	jq	BB59_242
BB59_266:
	ld	hl, 7
BB59_262:
	push	hl
BB59_260:
	ld	hl, 77
	jq	BB59_268
BB59_110:
	ld	hl, 7
BB59_109:
	push	hl
	ld	hl, 19
	jq	BB59_268
BB59_74:
	ld	hl, 7
BB59_72:
	push	hl
BB59_73:
	ld	hl, 14
	jq	BB59_268
BB59_245:
	ld	hl, 7
BB59_242:
	push	hl
	ld	hl, 72
	jq	BB59_268
BB59_171:
	ld	hl, 44
	ld	de, 3
	jq	BB59_149
BB59_105:
	ld	hl, 11
	jq	BB59_100
BB59_220:
	ld	hl, 11
	jq	BB59_215
BB59_146:
	ld	hl, 4
	jq	BB59_144
BB59_104:
	ld	hl, 4
	jq	BB59_100
BB59_90:
	ld	hl, 4
	jq	BB59_86
BB59_214:
	ld	hl, 4
	jq	BB59_215
BB59_167:
	ld	hl, 42
	jq	BB59_158
BB59_103:
	ld	hl, 2
	jq	BB59_100
BB59_89:
	push	iy
	jq	BB59_87
BB59_185:
	ld	hl, 2
	push	hl
	ld	hl, 57
	jq	BB59_268
BB59_143:
	ld	hl, 3
BB59_144:
	push	hl
	ld	hl, 24
	jq	BB59_268
BB59_99:
	ld	hl, 3
	jq	BB59_100
BB59_85:
	ld	hl, 3
	jq	BB59_86
BB59_217:
	ld	hl, 3
	jq	BB59_215
BB59_154:
	ld	hl, 30
	jq	BB59_148
BB59_107:
	ld	hl, 12
	jq	BB59_100
BB59_221:
	ld	hl, 12
	jq	BB59_215
BB59_106:
	ld	hl, 9
	jq	BB59_100
BB59_91:
	ld	hl, 9
	jq	BB59_86
BB59_216:
	ld	hl, 9
	jq	BB59_215
BB59_175:
	ld	hl, 48
	jq	BB59_158
BB59_102:
	ld	hl, 8
	jq	BB59_100
BB59_219:
	ld	hl, 8
	jq	BB59_215
BB59_101:
	ld	hl, 7
BB59_100:
	push	hl
	ld	hl, 18
	jq	BB59_268
BB59_88:
	ld	hl, 7
BB59_86:
	push	hl
BB59_87:
	ld	hl, 16
	jq	BB59_268
BB59_218:
	ld	hl, 7
BB59_215:
	push	hl
	ld	hl, 65
	jq	BB59_268
BB59_173:
	ld	hl, 46
	jq	BB59_158
BB59_123:
	ld	hl, 11
	jq	BB59_118
BB59_255:
	ld	hl, 11
	jq	BB59_250
BB59_122:
	ld	hl, 4
	jq	BB59_118
BB59_83:
	ld	hl, 4
	jq	BB59_79
BB59_249:
	ld	hl, 4
	jq	BB59_250
BB59_164:
	ld	hl, 40
	jq	BB59_158
BB59_121:
	ld	hl, 2
	jq	BB59_118
BB59_82:
	push	iy
	jq	BB59_80
BB59_183:
	ld	hl, 56
	jq	BB59_184
BB59_168:
	ld	hl, 3
	jq	BB59_169
BB59_117:
	ld	hl, 3
	jq	BB59_118
BB59_78:
	ld	hl, 3
	jq	BB59_79
BB59_252:
	ld	hl, 3
	jq	BB59_250
BB59_155:
	ld	hl, 31
	jq	BB59_148
BB59_125:
	ld	hl, 12
	jq	BB59_118
BB59_256:
	ld	hl, 12
	jq	BB59_250
BB59_124:
	ld	hl, 9
	jq	BB59_118
BB59_84:
	ld	hl, 9
	jq	BB59_79
BB59_251:
	ld	hl, 9
	jq	BB59_250
BB59_178:
	ld	hl, 51
	jq	BB59_158
BB59_120:
	ld	hl, 8
	jq	BB59_118
BB59_254:
	ld	hl, 8
	jq	BB59_250
BB59_119:
	ld	hl, 7
BB59_118:
	push	hl
	ld	hl, 20
	jq	BB59_268
BB59_81:
	ld	hl, 7
BB59_79:
	push	hl
BB59_80:
	ld	hl, 15
	jq	BB59_268
BB59_253:
	ld	hl, 7
BB59_250:
	push	hl
	ld	hl, 73
	jq	BB59_268
BB59_172:
	ld	hl, 45
	jq	BB59_158
BB59_45:
	ld	hl, 11
	jq	BB59_40
BB59_228:
	ld	hl, 11
	jq	BB59_223
BB59_44:
	ld	hl, 4
	jq	BB59_40
BB59_97:
	ld	hl, 4
	jq	BB59_93
BB59_222:
	ld	hl, 4
	jq	BB59_223
BB59_165:
	ld	hl, 39
	jq	BB59_158
BB59_43:
	ld	hl, 2
	jq	BB59_40
BB59_96:
	push	iy
	jq	BB59_94
BB59_187:
	ld	hl, 59
BB59_184:
	ld	de, 2
	jq	BB59_149
BB59_170:
	ld	hl, 6
BB59_169:
	push	hl
	ld	hl, 43
	jq	BB59_268
BB59_39:
	ld	hl, 3
	jq	BB59_40
BB59_92:
	ld	hl, 3
	jq	BB59_93
BB59_225:
	ld	hl, 3
	jq	BB59_223
BB59_156:
	ld	hl, 32
BB59_148:
	ld	de, 5
BB59_149:
	push	de
	jq	BB59_268
BB59_47:
	ld	hl, 12
	jq	BB59_40
BB59_229:
	ld	hl, 12
	jq	BB59_223
BB59_46:
	ld	hl, 9
	jq	BB59_40
BB59_98:
	ld	hl, 9
	jq	BB59_93
BB59_224:
	ld	hl, 9
	jq	BB59_223
BB59_179:
	ld	hl, 52
BB59_158:
	push	bc
	jq	BB59_268
BB59_42:
	ld	hl, 8
	jq	BB59_40
BB59_227:
	ld	hl, 8
	jq	BB59_223
BB59_41:
	ld	hl, 7
BB59_40:
	push	hl
	ld	hl, 6
	jq	BB59_268
BB59_95:
	ld	hl, 7
BB59_93:
	push	hl
BB59_94:
	ld	hl, 17
	jq	BB59_268
BB59_226:
	ld	hl, 7
BB59_223:
	push	hl
	ld	hl, 66
BB59_268:
	push	hl
BB59_269:
	call	_cpu_instruction
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI59_0:
	private	LJTI59_0
LJTI59_0:
	dl	BB59_261
	dl	BB59_28
	dl	BB59_261
	dl	BB59_234
	dl	BB59_37
	dl	BB59_27
	dl	BB59_33
	dl	BB59_230
	dl	BB59_70
	dl	BB59_145
	dl	BB59_159
	dl	BB59_186
	dl	BB59_35
	dl	BB59_23
	dl	BB59_31
	dl	BB59_233
	dl	BB59_147
	dl	BB59_30
	dl	BB59_267
	dl	BB59_238
	dl	BB59_38
	dl	BB59_29
	dl	BB59_34
	dl	BB59_232
	dl	BB59_161
	dl	BB59_26
	dl	BB59_163
	dl	BB59_257
	dl	BB59_240
	dl	BB59_24
	dl	BB59_239
	dl	BB59_236
	dl	BB59_19
	dl	BB59_7
	dl	BB59_13
	dl	BB59_211
	dl	BB59_21
	dl	BB59_6
	dl	BB59_14
	dl	BB59_206
	dl	BB59_160
	dl	BB59_5
	dl	BB59_157
	dl	BB59_213
	dl	BB59_16
	dl	BB59_1
	dl	BB59_10
	dl	BB59_209
	dl	BB59_150
	dl	BB59_9
	dl	BB59_267
	dl	BB59_212
	dl	BB59_22
	dl	BB59_8
	dl	BB59_15
	dl	BB59_208
	dl	BB59_180
	dl	BB59_4
	dl	BB59_162
	dl	BB59_204
	dl	BB59_18
	dl	BB59_3
	dl	BB59_12
	dl	BB59_210
	dl	BB59_141
	dl	BB59_132
	dl	BB59_261
	dl	BB59_194
	dl	BB59_142
	dl	BB59_131
	dl	BB59_67
	dl	BB59_188
	dl	BB59_63
	dl	BB59_130
	dl	BB59_69
	dl	BB59_235
	dl	BB59_139
	dl	BB59_126
	dl	BB59_64
	dl	BB59_191
	dl	BB59_151
	dl	BB59_134
	dl	BB59_267
	dl	BB59_195
	dl	BB59_264
	dl	BB59_133
	dl	BB59_68
	dl	BB59_190
	dl	BB59_176
	dl	BB59_129
	dl	BB59_259
	dl	BB59_193
	dl	BB59_266
	dl	BB59_128
	dl	BB59_66
	dl	BB59_192
	dl	BB59_137
	dl	BB59_54
	dl	BB59_261
	dl	BB59_202
	dl	BB59_138
	dl	BB59_53
	dl	BB59_60
	dl	BB59_196
	dl	BB59_62
	dl	BB59_52
	dl	BB59_182
	dl	BB59_258
	dl	BB59_135
	dl	BB59_48
	dl	BB59_57
	dl	BB59_199
	dl	BB59_152
	dl	BB59_56
	dl	BB59_267
	dl	BB59_203
	dl	BB59_264
	dl	BB59_55
	dl	BB59_61
	dl	BB59_198
	dl	BB59_177
	dl	BB59_51
	dl	BB59_259
	dl	BB59_201
	dl	BB59_266
	dl	BB59_50
	dl	BB59_59
	dl	BB59_200
	dl	BB59_181
	dl	BB59_114
	dl	BB59_267
	dl	BB59_247
	dl	BB59_263
	dl	BB59_113
	dl	BB59_76
	dl	BB59_241
	dl	BB59_166
	dl	BB59_112
	dl	BB59_75
	dl	BB59_185
	dl	BB59_265
	dl	BB59_108
	dl	BB59_71
	dl	BB59_244
	dl	BB59_153
	dl	BB59_116
	dl	BB59_267
	dl	BB59_248
	dl	BB59_264
	dl	BB59_115
	dl	BB59_77
	dl	BB59_243
	dl	BB59_174
	dl	BB59_111
	dl	BB59_259
	dl	BB59_246
	dl	BB59_266
	dl	BB59_110
	dl	BB59_74
	dl	BB59_245
	dl	BB59_171
	dl	BB59_105
	dl	BB59_267
	dl	BB59_220
	dl	BB59_146
	dl	BB59_104
	dl	BB59_90
	dl	BB59_214
	dl	BB59_167
	dl	BB59_103
	dl	BB59_89
	dl	BB59_185
	dl	BB59_143
	dl	BB59_99
	dl	BB59_85
	dl	BB59_217
	dl	BB59_154
	dl	BB59_107
	dl	BB59_267
	dl	BB59_221
	dl	BB59_264
	dl	BB59_106
	dl	BB59_91
	dl	BB59_216
	dl	BB59_175
	dl	BB59_102
	dl	BB59_259
	dl	BB59_219
	dl	BB59_266
	dl	BB59_101
	dl	BB59_88
	dl	BB59_218
	dl	BB59_173
	dl	BB59_123
	dl	BB59_267
	dl	BB59_255
	dl	BB59_263
	dl	BB59_122
	dl	BB59_83
	dl	BB59_249
	dl	BB59_164
	dl	BB59_121
	dl	BB59_82
	dl	BB59_183
	dl	BB59_168
	dl	BB59_117
	dl	BB59_78
	dl	BB59_252
	dl	BB59_155
	dl	BB59_125
	dl	BB59_267
	dl	BB59_256
	dl	BB59_264
	dl	BB59_124
	dl	BB59_84
	dl	BB59_251
	dl	BB59_178
	dl	BB59_120
	dl	BB59_259
	dl	BB59_254
	dl	BB59_266
	dl	BB59_119
	dl	BB59_81
	dl	BB59_253
	dl	BB59_172
	dl	BB59_45
	dl	BB59_267
	dl	BB59_228
	dl	BB59_263
	dl	BB59_44
	dl	BB59_97
	dl	BB59_222
	dl	BB59_165
	dl	BB59_43
	dl	BB59_96
	dl	BB59_187
	dl	BB59_170
	dl	BB59_39
	dl	BB59_92
	dl	BB59_225
	dl	BB59_156
	dl	BB59_47
	dl	BB59_267
	dl	BB59_229
	dl	BB59_264
	dl	BB59_46
	dl	BB59_98
	dl	BB59_224
	dl	BB59_179
	dl	BB59_42
	dl	BB59_259
	dl	BB59_227
	dl	BB59_266
	dl	BB59_41
	dl	BB59_95
	dl	BB59_226

	section	.text,"ax",@progbits
	public	_cpu_inx
_cpu_inx:
	ld	hl, -2
	call	__frameset
	ld	iy, _cycles
	ld	bc, 1
	ld	d, 0
	ld	a, (_reg_x)
	ld	(ix - 2), a
	add	a, 1
	ld	(ix - 1), a
	ld	(_reg_x), a
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	a, d
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, (ix - 2)
	add	a, 1
	jq	nc, BB60_2
	ld	d, 2
BB60_2:
	ld	a, (ix - 1)
	and	a, -128
	ld	e, a
	ld	a, d
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 9
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_iny
_cpu_iny:
	ld	hl, -2
	call	__frameset
	ld	iy, _cycles
	ld	bc, 1
	ld	d, 0
	ld	a, (_reg_y)
	ld	(ix - 2), a
	add	a, 1
	ld	(ix - 1), a
	ld	(_reg_y), a
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	a, d
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, (ix - 2)
	add	a, 1
	jq	nc, BB61_2
	ld	d, 2
BB61_2:
	ld	a, (ix - 1)
	and	a, -128
	ld	e, a
	ld	a, d
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 10
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_dex
_cpu_dex:
	ld	hl, -1
	call	__frameset
	ld	hl, _reg_x
	ld	iy, _cycles
	ld	bc, 1
	ld	d, 0
	dec	(hl)
	ld	a, (hl)
	ld	(ix - 1), a
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	a, d
	call	__ladd
	ld	a, e
	ld	e, (ix - 1)
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, e
	or	a, a
	jq	nz, BB62_2
	ld	d, 2
BB62_2:
	ld	a, e
	and	a, -128
	ld	e, a
	ld	a, d
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 12
	inc	sp
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_dey
_cpu_dey:
	ld	hl, -1
	call	__frameset
	ld	hl, _reg_y
	ld	iy, _cycles
	ld	bc, 1
	ld	d, 0
	dec	(hl)
	ld	a, (hl)
	ld	(ix - 1), a
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	a, d
	call	__ladd
	ld	a, e
	ld	e, (ix - 1)
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, e
	or	a, a
	jq	nz, BB63_2
	ld	d, 2
BB63_2:
	ld	a, e
	and	a, -128
	ld	e, a
	ld	a, d
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 13
	inc	sp
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_branchHelper
_cpu_branchHelper:
	ld	hl, -3
	call	__frameset
	ld	l, (ix + 6)
	ld	e, (ix + 9)
	ld	iy, _reg_pc
	ld	a, (_reg_status)
	and	a, e
	or	a, a
	jq	nz, BB64_1
	ld	a, 0
	jq	BB64_3
BB64_1:
	ld	a, 1
BB64_3:
	xor	a, l
	ld	hl, (iy)
	bit	0, a
	jq	nz, BB64_5
	push	hl
	call	_bus_readCPU
	ld	l, a
	ld	(ix - 3), hl
	pop	hl
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iy, _reg_pc
	ld	bc, 2
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	hl, (ix - 3)
	ld	a, l
	rlc	a
	sbc	a, a
	ld	h, a
	ld	e, l
	ld	d, h
	ld	hl, (iy)
	add.sis	hl, de
BB64_5:
	inc.sis	hl
	ld	(iy), l
	ld	(iy + 1), h
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_bcc
_cpu_bcc:
	ld	hl, 1
	push	hl
	dec	hl
	push	hl
	call	_cpu_branchHelper
	pop	hl
	pop	hl
	ld	a, 25
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_bcs
_cpu_bcs:
	ld	hl, 1
	push	hl
	push	hl
	call	_cpu_branchHelper
	pop	hl
	pop	hl
	ld	a, 26
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_bne
_cpu_bne:
	ld	hl, 2
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_cpu_branchHelper
	pop	hl
	pop	hl
	ld	a, 27
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_beq
_cpu_beq:
	ld	hl, 2
	push	hl
	dec	hl
	push	hl
	call	_cpu_branchHelper
	pop	hl
	pop	hl
	ld	a, 28
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_bpl
_cpu_bpl:
	ld	hl, 128
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_cpu_branchHelper
	pop	hl
	pop	hl
	ld	a, 29
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_bmi
_cpu_bmi:
	ld	hl, 128
	push	hl
	ld	hl, 1
	push	hl
	call	_cpu_branchHelper
	pop	hl
	pop	hl
	ld	a, 30
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_bvc
_cpu_bvc:
	ld	hl, 64
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_cpu_branchHelper
	pop	hl
	pop	hl
	ld	a, 31
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_bvs
_cpu_bvs:
	ld	hl, 64
	push	hl
	ld	hl, 1
	push	hl
	call	_cpu_branchHelper
	pop	hl
	pop	hl
	ld	a, 32
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_tax
_cpu_tax:
	ld	iy, _cycles
	ld	c, 0
	ld	a, (_reg_accumulator)
	ld	d, a
	ld	(_reg_x), a
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iyl, c
	ld	bc, 1
	ld	a, iyl
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, d
	or	a, a
	jq	nz, BB73_2
	ld	iyl, 2
BB73_2:
	ld	a, d
	and	a, -128
	ld	e, a
	ld	a, iyl
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 33
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_txa
_cpu_txa:
	ld	iy, _cycles
	ld	c, 0
	ld	a, (_reg_x)
	ld	d, a
	ld	(_reg_accumulator), a
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iyl, c
	ld	bc, 1
	ld	a, iyl
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, d
	or	a, a
	jq	nz, BB74_2
	ld	iyl, 2
BB74_2:
	ld	a, d
	and	a, -128
	ld	e, a
	ld	a, iyl
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 34
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_tay
_cpu_tay:
	ld	iy, _cycles
	ld	c, 0
	ld	a, (_reg_accumulator)
	ld	d, a
	ld	(_reg_y), a
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iyl, c
	ld	bc, 1
	ld	a, iyl
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, d
	or	a, a
	jq	nz, BB75_2
	ld	iyl, 2
BB75_2:
	ld	a, d
	and	a, -128
	ld	e, a
	ld	a, iyl
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 35
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_tya
_cpu_tya:
	ld	iy, _cycles
	ld	c, 0
	ld	a, (_reg_y)
	ld	d, a
	ld	(_reg_accumulator), a
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iyl, c
	ld	bc, 1
	ld	a, iyl
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, d
	or	a, a
	jq	nz, BB76_2
	ld	iyl, 2
BB76_2:
	ld	a, d
	and	a, -128
	ld	e, a
	ld	a, iyl
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 36
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_tsx
_cpu_tsx:
	ld	iy, _cycles
	ld	c, 0
	ld	a, (_stackPointer)
	ld	d, a
	ld	(_reg_x), a
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	iyl, c
	ld	bc, 1
	ld	a, iyl
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, (_reg_status)
	and	a, 125
	ld	l, a
	ld	a, d
	or	a, a
	jq	nz, BB77_2
	ld	iyl, 2
BB77_2:
	ld	a, d
	and	a, -128
	ld	e, a
	ld	a, iyl
	add	a, e
	add	a, l
	ld	(_reg_status), a
	ld	a, 37
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_txs
_cpu_txs:
	ld	iy, _cycles
	ld	bc, 1
	ld	d, 0
	ld	a, (_reg_x)
	ld	(_stackPointer), a
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	a, d
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 38
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_pla
_cpu_pla:
	call	_cpu_stackPull
	ld	l, a
	ld	(_reg_accumulator), a
	ld	a, (_reg_status)
	and	a, 125
	ld	e, a
	ld	a, l
	or	a, a
	jq	z, BB79_1
	ld	c, 0
	jq	BB79_3
BB79_1:
	ld	c, 2
BB79_3:
	ld	a, l
	and	a, -128
	ld	l, a
	ld	a, c
	add	a, l
	add	a, e
	ld	(_reg_status), a
	ld	a, 39
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_pha
_cpu_pha:
	ld	a, (_reg_accumulator)
	ld	l, a
	push	hl
	call	_cpu_stackPush
	pop	hl
	ld	a, 40
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_php
_cpu_php:
	ld	a, (_reg_status)
	ld	l, a
	push	hl
	call	_cpu_stackPush
	pop	hl
	ld	a, 41
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_plp
_cpu_plp:
	call	_cpu_stackPull
	and	a, -49
	add	a, 32
	ld	(_reg_status), a
	ld	a, 42
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_rts
_cpu_rts:
	call	_cpu_stackPull16
	inc.sis	hl
	ld	iy, _reg_pc
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 45
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_rti
_cpu_rti:
	call	_cpu_stackPull
	ld	(_reg_status), a
	call	_cpu_stackPull16
	ld	iy, _reg_pc
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, _reg_status
	set	5, (hl)
	ld	hl, (_cycles)
	ld	iy, _cycles
	lea	iy, iy + 3
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, 46
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_clc
_cpu_clc:
	ld	hl, _reg_status
	ld	iy, _cycles
	ld	bc, 1
	xor	a, a
	ld	d, 47
	res	0, (hl)
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_sec
_cpu_sec:
	ld	hl, _reg_status
	ld	iy, _cycles
	ld	bc, 1
	xor	a, a
	ld	d, 48
	set	0, (hl)
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_cld
_cpu_cld:
	ld	hl, _reg_status
	ld	iy, _cycles
	ld	bc, 1
	xor	a, a
	ld	d, 49
	res	3, (hl)
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_sed
_cpu_sed:
	ld	hl, _reg_status
	ld	iy, _cycles
	ld	bc, 1
	xor	a, a
	ld	d, 50
	set	3, (hl)
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_cli
_cpu_cli:
	ld	hl, _reg_status
	ld	iy, _cycles
	ld	bc, 1
	xor	a, a
	ld	d, 51
	res	2, (hl)
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_sei
_cpu_sei:
	ld	hl, _reg_status
	ld	iy, _cycles
	ld	bc, 1
	xor	a, a
	ld	d, 52
	set	2, (hl)
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_clv
_cpu_clv:
	ld	hl, _reg_status
	ld	iy, _cycles
	ld	bc, 1
	xor	a, a
	ld	d, 53
	res	6, (hl)
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_brk
_cpu_brk:
	ld	l, 54
	ld	a, (_reg_status)
	or	a, 20
	ld	(_reg_status), a
	ld	a, l
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_nop
_cpu_nop:
	ld	iy, _cycles
	ld	bc, 1
	xor	a, a
	ld	d, 55
	ld	hl, (_cycles)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__ladd
	ld	a, e
	ld	(_cycles), hl
	ld	(_cycles+3), a
	ld	a, d
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_cpu_illegal_jam
_cpu_illegal_jam:
	ld	l, 76
	ld	a, (_reg_status)
	or	a, 20
	ld	(_reg_status), a
	ld	a, l
	ret
	section	.text,"ax",@progbits

	section	.data,"aw",@progbits
	public	_reg_status
_reg_status:
	db	36

	section	.bss,"aw",@nobits
	public	_reg_accumulator
_reg_accumulator:
	rb	1

	section	.bss,"aw",@nobits
	public	_reg_x
_reg_x:
	rb	1

	section	.bss,"aw",@nobits
	public	_reg_y
_reg_y:
	rb	1

	section	.bss,"aw",@nobits
	public	_reg_pc
_reg_pc:
	rb	2

	section	.data,"aw",@progbits
	public	_stackPointer
_stackPointer:
	db	253

	section	.data,"aw",@progbits
	public	_cycles
_cycles:
	dd	4

	section	.bss,"aw",@nobits
	public	_accumulatorAddrMode
_accumulatorAddrMode:
	rb	1

	section	.bss,"aw",@nobits
	public	_didPanic
_didPanic:
	rb	1

	section	.bss,"aw",@nobits
	public	_generateTrace
_generateTrace:
	rb	1

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	1 dup 0

	section	.rodata,"a",@progbits
	private	L_.str.1
L_.str.1:
	db	"#$%02X", 0

	section	.rodata,"a",@progbits
	private	L_.str.2
L_.str.2:
	db	"$%04X", 0

	section	.rodata,"a",@progbits
	private	L_.str.3
L_.str.3:
	db	"$%02X", 0

	section	.rodata,"a",@progbits
	private	L_.str.4
L_.str.4:
	db	"= %02X", 0

	section	.rodata,"a",@progbits
	private	L_.str.5
L_.str.5:
	db	"($%04X)", 0

	section	.rodata,"a",@progbits
	private	L_.str.6
L_.str.6:
	db	"= %04X", 0

	section	.rodata,"a",@progbits
	private	L_.str.7
L_.str.7:
	db	"$%04X,X", 0

	section	.rodata,"a",@progbits
	private	L_.str.8
L_.str.8:
	db	"$%04X,Y", 0

	section	.rodata,"a",@progbits
	private	L_.str.9
L_.str.9:
	db	"$%02X,X", 0

	section	.rodata,"a",@progbits
	private	L_.str.10
L_.str.10:
	db	"$%02X,Y", 0

	section	.rodata,"a",@progbits
	private	L_.str.11
L_.str.11:
	db	"($%02X,X)", 0

	section	.rodata,"a",@progbits
	private	L_.str.12
L_.str.12:
	db	"@ %02X = %04X = %02X", 0

	section	.rodata,"a",@progbits
	private	L_.str.13
L_.str.13:
	db	"($%02X),Y", 0

	section	.rodata,"a",@progbits
	private	L_.str.14
L_.str.14:
	db	"= %04X @ %04X = %02X", 0

	section	.rodata,"a",@progbits
	private	L_.str.15
L_.str.15:
	db	"LDA", 0

	section	.rodata,"a",@progbits
	private	L_.str.16
L_.str.16:
	db	"LDX", 0

	section	.rodata,"a",@progbits
	private	L_.str.17
L_.str.17:
	db	"LDY", 0

	section	.rodata,"a",@progbits
	private	L_.str.18
L_.str.18:
	db	"STA", 0

	section	.rodata,"a",@progbits
	private	L_.str.19
L_.str.19:
	db	"STX", 0

	section	.rodata,"a",@progbits
	private	L_.str.20
L_.str.20:
	db	"STY", 0

	section	.rodata,"a",@progbits
	private	L_.str.21
L_.str.21:
	db	"ADC", 0

	section	.rodata,"a",@progbits
	private	L_.str.22
L_.str.22:
	db	"SBC", 0

	section	.rodata,"a",@progbits
	private	L_.str.23
L_.str.23:
	db	"INC", 0

	section	.rodata,"a",@progbits
	private	L_.str.24
L_.str.24:
	db	"INX", 0

	section	.rodata,"a",@progbits
	private	L_.str.25
L_.str.25:
	db	"INY", 0

	section	.rodata,"a",@progbits
	private	L_.str.26
L_.str.26:
	db	"DEC", 0

	section	.rodata,"a",@progbits
	private	L_.str.27
L_.str.27:
	db	"DEX", 0

	section	.rodata,"a",@progbits
	private	L_.str.28
L_.str.28:
	db	"DEY", 0

	section	.rodata,"a",@progbits
	private	L_.str.29
L_.str.29:
	db	"ASL", 0

	section	.rodata,"a",@progbits
	private	L_.str.30
L_.str.30:
	db	"LSR", 0

	section	.rodata,"a",@progbits
	private	L_.str.31
L_.str.31:
	db	"ROL", 0

	section	.rodata,"a",@progbits
	private	L_.str.32
L_.str.32:
	db	"ROR", 0

	section	.rodata,"a",@progbits
	private	L_.str.33
L_.str.33:
	db	"AND", 0

	section	.rodata,"a",@progbits
	private	L_.str.34
L_.str.34:
	db	"ORA", 0

	section	.rodata,"a",@progbits
	private	L_.str.35
L_.str.35:
	db	"EOR", 0

	section	.rodata,"a",@progbits
	private	L_.str.36
L_.str.36:
	db	"CMP", 0

	section	.rodata,"a",@progbits
	private	L_.str.37
L_.str.37:
	db	"CPX", 0

	section	.rodata,"a",@progbits
	private	L_.str.38
L_.str.38:
	db	"CPY", 0

	section	.rodata,"a",@progbits
	private	L_.str.39
L_.str.39:
	db	"BIT", 0

	section	.rodata,"a",@progbits
	private	L_.str.40
L_.str.40:
	db	"BCC", 0

	section	.rodata,"a",@progbits
	private	L_.str.41
L_.str.41:
	db	"BCS", 0

	section	.rodata,"a",@progbits
	private	L_.str.42
L_.str.42:
	db	"BNE", 0

	section	.rodata,"a",@progbits
	private	L_.str.43
L_.str.43:
	db	"BEQ", 0

	section	.rodata,"a",@progbits
	private	L_.str.44
L_.str.44:
	db	"BPL", 0

	section	.rodata,"a",@progbits
	private	L_.str.45
L_.str.45:
	db	"BMI", 0

	section	.rodata,"a",@progbits
	private	L_.str.46
L_.str.46:
	db	"BVC", 0

	section	.rodata,"a",@progbits
	private	L_.str.47
L_.str.47:
	db	"BVS", 0

	section	.rodata,"a",@progbits
	private	L_.str.48
L_.str.48:
	db	"TAX", 0

	section	.rodata,"a",@progbits
	private	L_.str.49
L_.str.49:
	db	"TXA", 0

	section	.rodata,"a",@progbits
	private	L_.str.50
L_.str.50:
	db	"TAY", 0

	section	.rodata,"a",@progbits
	private	L_.str.51
L_.str.51:
	db	"TYA", 0

	section	.rodata,"a",@progbits
	private	L_.str.52
L_.str.52:
	db	"TSX", 0

	section	.rodata,"a",@progbits
	private	L_.str.53
L_.str.53:
	db	"TXS", 0

	section	.rodata,"a",@progbits
	private	L_.str.54
L_.str.54:
	db	"PLA", 0

	section	.rodata,"a",@progbits
	private	L_.str.55
L_.str.55:
	db	"PHA", 0

	section	.rodata,"a",@progbits
	private	L_.str.56
L_.str.56:
	db	"PHP", 0

	section	.rodata,"a",@progbits
	private	L_.str.57
L_.str.57:
	db	"PLP", 0

	section	.rodata,"a",@progbits
	private	L_.str.58
L_.str.58:
	db	"JMP", 0

	section	.rodata,"a",@progbits
	private	L_.str.59
L_.str.59:
	db	"JSR", 0

	section	.rodata,"a",@progbits
	private	L_.str.60
L_.str.60:
	db	"RTS", 0

	section	.rodata,"a",@progbits
	private	L_.str.61
L_.str.61:
	db	"RTI", 0

	section	.rodata,"a",@progbits
	private	L_.str.62
L_.str.62:
	db	"CLC", 0

	section	.rodata,"a",@progbits
	private	L_.str.63
L_.str.63:
	db	"SEC", 0

	section	.rodata,"a",@progbits
	private	L_.str.64
L_.str.64:
	db	"CLD", 0

	section	.rodata,"a",@progbits
	private	L_.str.65
L_.str.65:
	db	"SED", 0

	section	.rodata,"a",@progbits
	private	L_.str.66
L_.str.66:
	db	"CLI", 0

	section	.rodata,"a",@progbits
	private	L_.str.67
L_.str.67:
	db	"SEI", 0

	section	.rodata,"a",@progbits
	private	L_.str.68
L_.str.68:
	db	"CLV", 0

	section	.rodata,"a",@progbits
	private	L_.str.69
L_.str.69:
	db	"BRK", 0

	section	.rodata,"a",@progbits
	private	L_.str.70
L_.str.70:
	db	"NOP", 0

	section	.rodata,"a",@progbits
	private	L_.str.71
L_.str.71:
	db	"*ALR", 0

	section	.rodata,"a",@progbits
	private	L_.str.72
L_.str.72:
	db	"*ANC", 0

	section	.rodata,"a",@progbits
	private	L_.str.73
L_.str.73:
	db	"*ANE", 0

	section	.rodata,"a",@progbits
	private	L_.str.74
L_.str.74:
	db	"*ARR", 0

	section	.rodata,"a",@progbits
	private	L_.str.75
L_.str.75:
	db	"*DCP", 0

	section	.rodata,"a",@progbits
	private	L_.str.76
L_.str.76:
	db	"*ISC", 0

	section	.rodata,"a",@progbits
	private	L_.str.77
L_.str.77:
	db	"*LAS", 0

	section	.rodata,"a",@progbits
	private	L_.str.78
L_.str.78:
	db	"*LAX", 0

	section	.rodata,"a",@progbits
	private	L_.str.79
L_.str.79:
	db	"*LXA", 0

	section	.rodata,"a",@progbits
	private	L_.str.80
L_.str.80:
	db	"*RLA", 0

	section	.rodata,"a",@progbits
	private	L_.str.81
L_.str.81:
	db	"*RRA", 0

	section	.rodata,"a",@progbits
	private	L_.str.82
L_.str.82:
	db	"*SAX", 0

	section	.rodata,"a",@progbits
	private	L_.str.83
L_.str.83:
	db	"*SBX", 0

	section	.rodata,"a",@progbits
	private	L_.str.84
L_.str.84:
	db	"*SHA", 0

	section	.rodata,"a",@progbits
	private	L_.str.85
L_.str.85:
	db	"*SHX", 0

	section	.rodata,"a",@progbits
	private	L_.str.86
L_.str.86:
	db	"*SHY", 0

	section	.rodata,"a",@progbits
	private	L_.str.87
L_.str.87:
	db	"*SLO", 0

	section	.rodata,"a",@progbits
	private	L_.str.88
L_.str.88:
	db	"*SRE", 0

	section	.rodata,"a",@progbits
	private	L_.str.89
L_.str.89:
	db	"*TAS", 0

	section	.rodata,"a",@progbits
	private	L_.str.90
L_.str.90:
	db	"*SBC", 0

	section	.rodata,"a",@progbits
	private	L_.str.91
L_.str.91:
	db	"*JAM", 0

	section	.rodata,"a",@progbits
	private	L_.str.92
L_.str.92:
	db	"*NOP", 0

	section	.rodata,"a",@progbits
	private	L_.str.93
L_.str.93:
	db	"???", 0

	section	.rodata,"a",@progbits
	private	L_switch.table.cpu_getInstructionString
L_switch.table.cpu_getInstructionString:
	dl	L_.str.15
	dl	L_.str.16
	dl	L_.str.17
	dl	L_.str.18
	dl	L_.str.19
	dl	L_.str.20
	dl	L_.str.21
	dl	L_.str.22
	dl	L_.str.23
	dl	L_.str.24
	dl	L_.str.25
	dl	L_.str.26
	dl	L_.str.27
	dl	L_.str.28
	dl	L_.str.29
	dl	L_.str.30
	dl	L_.str.31
	dl	L_.str.32
	dl	L_.str.33
	dl	L_.str.34
	dl	L_.str.35
	dl	L_.str.36
	dl	L_.str.37
	dl	L_.str.38
	dl	L_.str.39
	dl	L_.str.40
	dl	L_.str.41
	dl	L_.str.42
	dl	L_.str.43
	dl	L_.str.44
	dl	L_.str.45
	dl	L_.str.46
	dl	L_.str.47
	dl	L_.str.48
	dl	L_.str.49
	dl	L_.str.50
	dl	L_.str.51
	dl	L_.str.52
	dl	L_.str.53
	dl	L_.str.54
	dl	L_.str.55
	dl	L_.str.56
	dl	L_.str.57
	dl	L_.str.58
	dl	L_.str.59
	dl	L_.str.60
	dl	L_.str.61
	dl	L_.str.62
	dl	L_.str.63
	dl	L_.str.64
	dl	L_.str.65
	dl	L_.str.66
	dl	L_.str.67
	dl	L_.str.68
	dl	L_.str.69
	dl	L_.str.70
	dl	L_.str.71
	dl	L_.str.72
	dl	L_.str.73
	dl	L_.str.74
	dl	L_.str.75
	dl	L_.str.76
	dl	L_.str.77
	dl	L_.str.78
	dl	L_.str.79
	dl	L_.str.80
	dl	L_.str.81
	dl	L_.str.82
	dl	L_.str.83
	dl	L_.str.84
	dl	L_.str.85
	dl	L_.str.86
	dl	L_.str.87
	dl	L_.str.88
	dl	L_.str.89
	dl	L_.str.90
	dl	L_.str.91
	dl	L_.str.92

	ident	"clang version 14.0.0 (https://github.com/jacobly0/llvm-project a139def90d26173f771eb1eca797633d1fbb2797)"
	extern	_sprintf
	extern	__imulu
	extern	__bshru
	extern	__frameset0
	extern	__sshl
	extern	__iand
	extern	_exc_trace
	extern	__Unwind_SjLj_Register
	extern	_bus_startTimeMonitor
	extern	__ixor
	extern	_bus_readCPU
	extern	_bus_endTimeMonitor
	extern	_bus_cpuReport
	extern	__ishru
	extern	_bus_readCPUAddr
	extern	_rand
	extern	__sand
	extern	__ishl
	extern	__ladd
	extern	_exc_panic_stackUnderflow
	extern	_bus_writeCPU
	extern	__frameset
	extern	__Unwind_SjLj_Unregister
	extern	__bshl
	extern	_exc_panic_stackOverflow
